<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<!DOCTYPE html>
		<html lang="en">

		<head>
			<meta charset="UTF-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
		</head>

		<body onload="load(<%-pollStatus%>)">
			<%- include('../partials/formbar_header') %>
				<header id="quickMenu">
					<button id="menuUsers" class="quickButton pressed" onclick="toUsers()">Users</button>
					<button id="menuPolls" class="quickButton" onclick="toPolls()">Poll </button>
					<button id="menuLesson" class="quickButton" onclick="toLesson()">Make a Lesson</button>
					<button id="menuPlugins" class="quickButton" onclick="toPlugins()">Plugins</button>
				</header>

				<p id="classCode">Class Code:</p>

				<div id="permChanges">
					<div id="permChangeKey">

					</div>
					<div id="permFilterBoxes">
						Filter:
						<button type="button" id="help" class="filter">Help tickets</button>
						<button type="button" id="break" class="filter">Break</button>
						<button type="button" id="polls" class="filter">Polls</button>
					</div>
					<div id="permSortBoxes">
						Sort:
						<button type="button" id="name" class="sort">Name</button>
						<button type="button" id="polls" class="sort">Polls</button>
						<button type="button" id="helpTime" class="sort">Help Time</button>
						<button type="button" id="permissions" class="sort pressed">Permissions ðŸ¡‡</button>
					</div>
					<div id="permChangeList">

					</div>

				</div>
				<div id="pollChanges">
					<h2 class="headerText" style="margin-top: 0;">Start/End Poll</h2>
					<form id="startPollForm" action="#">
						<label for="resNumber">How many possible responses?</label>
						<input type="number" id="resNumber" min="1" max="26" value="1">
						<br>
						<label for="resTextBox">Would like to accept text responses?</label>
						<input type="checkbox" id="resTextBox">
						<br>
						<label for="pollBox">Prompt for the poll?</label>
						<input type="text" id="pollBox" placeholder="Prompt (optional)">
						<br>
						<label for="changeNames">Customize the answer options?</label>
						<input type="button" id="changeNames" value="Change Names" onclick="namePollFunc()" class="quickButton">
						<br>
						<div id="pollAnsForm"></div>
						<label for="blind">Blind poll? (Responses won't be visible until everyone has answered)</label>
						<input type="checkbox" id="blind">
						<br>
						<input type="button" id="startPoll" value="Start Poll" onclick="startPollFunc('poll')" class="quickButton">
						<br>
						<h3 class="headerText" style="margin-bottom: 0;">Premade Polls:</h1>
							<input type="button" value="TUTD" onclick="startPollFunc('TUTD')" class="quickButton">
					</form>
					<button id="endPoll" onclick="endPollFunc()" hidden class="quickButton">End Poll</button>
					<br>
					<br>
					<button type="button" onclick="displayPreviousPolls()" class="quickButton">View Previous
						Polls</button>
				</div>
				<div id="previousPolls">

				</div>
				<div id="lessonMaker">
					<form method="post" enctype="multipart/form-data">
						<input name="spreadsheet" type="file">
						<input type="submit" class="quickButton">
					</form>
					<button type="button" onclick="doStep(<%-currentStep%>)">Next Step</button><br>
					<br>
					<form>
						<label class="form-control" id="pollControl" for="modeP">
							<input type="radio" name="mode" id="modeP" onchange="modeChange()" value="poll">
							Poll Mode
						</label>
						<label class="form-control" id="pollControl" for="modeL">
							<input type="radio" name="mode" id="modeL" onchange="modeChange()" value="lesson">
							Lesson Mode
						</label>
						<label class="form-control" id="pollControl" for="modeQ">
							<input type="radio" name="mode" id="modeQ" onchange="modeChange()" value="quiz">
							Quiz Mode
						</label>
						<label class="form-control" id="pollControl" for="modePT">
							<input type="radio" name="mode" id="modePT" onchange="modeChange()" value="playtime">
							Playtime Mode
						</label>
					</form>
				</div>
				<div id="plugins">
				</div>
				<%- include('../partials/body_content') %>
		</body>

		</html>
		<script>
			// 0 = off
			// 1 = only
			// 2 = except
			let filter = {
				help: 0,
				break: 0,
				polls: 0
			}
			// 0 = off
			// 1 = descending
			// 2 = ascending
			let sort = {
				name: 0,
				polls: 0,
				helpTime: 0,
				permissions: 1
			}

			let filterState = {
				help: [
					'Help tickets',
					'Help ticket in',
					'No help ticket'
				],
				break: [
					'Break',
					'Taking a break',
					'Not taking a break'
				],
				polls: [
					'Polls',
					'Responded to poll',
					'Did not respond to poll',
				]
			}

			let sortState = {
				name: [
					'Name',
					'Name ðŸ¡‡',
					'Name ðŸ¡…'
				],
				polls: [
					'Polls',
					'Polls ðŸ¡‡',
					'Polls ðŸ¡…'
				],
				helpTime: [
					'Help time',
					'Sorting by Help time',
				],
				permissions: [
					'Permissions',
					'Permissions ðŸ¡‡',
					'Permissions ðŸ¡…'
				]
			}

			var permChanges = document.getElementById('permChanges')
			var permChangeKey = document.getElementById('permChangeKey')
			var permChangeList = document.getElementById('permChangeList')
			var pollChanges = document.getElementById('pollChanges')
			var startPoll = document.getElementById('startPoll')
			var resNumber = document.getElementById('resNumber')
			var resTextBox = document.getElementById('resTextBox')
			var endPoll = document.getElementById('endPoll')
			var startPollForm = document.getElementById('startPollForm')
			var pollPrompt = document.getElementById('pollBox')
			var permFilterBoxes = document.getElementById('permFilterBoxes')
			var pollFilter = document.getElementById('pollFilter')
			var missingPollFilter = document.getElementById('missingPollFilter')
			var lettFilter = document.getElementById('lettFilter')
			var textFilter = document.getElementById('textFilter')
			var permSort = document.getElementById('permSort')
			var permSortLabel = document.getElementById('permSortLabel')
			var helpFilter = document.getElementById('helpFilter')
			var pollAnsForm = document.getElementById('pollAnsForm')
			var lessonMaker = document.getElementById('lessonMaker')
			var pluginsDiv = document.getElementById('plugins')
			var previousPolls = document.getElementById('previousPolls')
			var classCode = document.getElementById('classCode')
			var menuUsers = document.getElementById('menuUsers')
			var menuPolls = document.getElementById('menuPolls')
			var menuLesson = document.getElementById('menuLesson')
			var menuPlugins = document.getElementById('menuPlugins')

			function deleteUser(e) {
				socket.emit('deleteUser', e.dataset.userid)
				socket.emit('cpupdate')
			}

			// Function runs on page load
			// Checks if poll is active or not and displays correct output
			function load(pollStatus) {
				pollChanges.style.display = 'none'
				permChanges.style.display = 'block'
				lessonMaker.style.display = 'none'
				previousPolls.style.display = 'none'
				pluginsDiv.style.display = 'none'
				if (pollStatus) {
					startPollForm.style.display = 'none'
					endPoll.style.display = 'block'
					lessonMaker.style.display = 'none'
					previousPolls.style.display = 'none'
				} else {
					startPollForm.style.display = 'block'
					endPoll.style.display = 'none'
					previousPolls.style.display = 'none'
					lessonMaker.style.display = 'none'
				}
			}
			// Changes to the create a poll section of the page
			function toPolls() {
				pollChanges.style.display = 'block'
				permChanges.style.display = 'none'
				lessonMaker.style.display = 'none'
				previousPolls.style.display = 'none'
				pluginsDiv.style.display = 'none'

				menuUsers.classList.remove("pressed");
				menuPolls.classList.add("pressed");
				menuLesson.classList.remove("pressed");
				menuPlugins.classList.remove("pressed");
			}
			// Changes to the permission change section of the page
			function toUsers() {
				pollChanges.style.display = 'none'
				permChanges.style.display = 'block'
				lessonMaker.style.display = 'none'
				previousPolls.style.display = 'none'
				pluginsDiv.style.display = 'none'

				menuUsers.classList.add("pressed");
				menuPolls.classList.remove("pressed");
				menuLesson.classList.remove("pressed");
				menuPlugins.classList.remove("pressed");
			}

			function toLesson() {
				pollChanges.style.display = 'none'
				permChanges.style.display = 'none'
				lessonMaker.style.display = 'block'
				previousPolls.style.display = 'none'
				pluginsDiv.style.display = 'none'

				menuUsers.classList.remove("pressed");
				menuPolls.classList.remove("pressed");
				menuLesson.classList.add("pressed");
				menuPlugins.classList.remove("pressed");
			}

			function toPlugins() {
				pollChanges.style.display = 'none'
				permChanges.style.display = 'none'
				lessonMaker.style.display = 'none'
				previousPolls.style.display = 'none'
				pluginsDiv.style.display = 'block'

				menuUsers.classList.remove("pressed");
				menuPolls.classList.remove("pressed");
				menuLesson.classList.remove("pressed");
				menuPlugins.classList.add("pressed");
			}

			//displays the previos polls page
			function displayPreviousPolls() {
				pollChanges.style.display = 'none'
				permChanges.style.display = 'none'
				lessonMaker.style.display = 'none'
				previousPolls.style.display = 'block'
				pluginsDiv.style.display = 'none'
			}
			//makes the previous polls page
			function buildPreviousPolls(data) {
				previousPolls.innerHTML = ''
				for (let i = data.length - 1; i >= 0; i--) {
					previousPolls.innerHTML += `<button type="button" onclick="displayPoll(${data[i].id})" class="quickButton">${data[i].date}</button>` + '</br>'
				}

			}

			function displayPoll(data) {
				socket.emit('previousPollDisplay', data)
			}

			socket.on('previousPollData', function (data) {
				previousPolls.innerHTML = 'Prompt: ' + data.prompt + '</br>'

				for (let i = 0; i < data.names.length; i++) {
					previousPolls.innerHTML += 'Name: ' + data.names[i] + '</br>'
					previousPolls.innerHTML += 'Letter: ' + data.letter[i] + '</br>'
					previousPolls.innerHTML += 'Text: ' + data.text[i] + '</br></br>'
				}

				previousPolls.innerHTML += `<button type="button" onclick="socket.emit('cpupdate')">Return To Selection</button>`
			})

			// Starts a new poll that allows students to submit answers
			// Check how many possible responses and if the teacher wants to accept text responses
			function startPollFunc(pollType) {
				if (pollType == 'poll') {
					var pollAnsNames = document.getElementsByName('pollAnsName')
					var blind = document.getElementById('blind').checked

					var pollAnsValues = []
					for (let i = 0; i < pollAnsNames.length; i++) {
						pollAnsValues.push(pollAnsNames[i].value)
					}
					pollAnsForm.style.display = 'none'
					startPollForm.style.display = 'none'
					endPoll.style.display = 'block'
					permChanges.style.display = 'none'
					socket.emit('startPoll', resNumber.value, resTextBox.checked, pollPrompt.value, pollAnsValues, blind)
					socket.emit('reload') // Reloads the users page
				} else if (pollType == 'TUTD') {
					pollAnsForm.style.display = 'none';
					startPollForm.style.display = 'none';
					endPoll.style.display = 'block';
					permChanges.style.display = 'none';
					socket.emit('startPoll', 3, false, "Thumbs?", [{answer: "Up", weight: 0.9}, {answer: "Down", weight: 1.1}, {answer: "Wiggle", weight: 1}], false, 1);
				};
			};

			resNumber.onchange = function () {
				if (this.value < 1) this.value = 1
				if (this.value > 26) this.value = 26
				if (pollAnsForm.style.display == 'block') namePollFunc()
			};

			function namePollFunc() {
				pollAnsForm.style.display = 'block'
				var changeNamesButton = document.getElementById('changeNames')
				changeNamesButton.value = "Reset names"
				changeNamesButton.onclick = clearPollNames
				var pollAnsNames = document.getElementsByName('pollAnsName')
				var pollAnsValues = []
				for (let i = 0; i < pollAnsNames.length; i++) {
					pollAnsValues.push(pollAnsNames[i].value)
				}
				pollAnsForm.innerHTML = ''
				for (let i = 0; i < resNumber.value; i++) {
					//Show the color associated with the answer
					let color = ''
					let CC = '01234569ABCDEF'
					let colorI = CC[Math.floor(i / 2)]
					let colorJ = CC[13 - Math.floor(i / 2)]
					switch (i % 6) {
						case 0:
							color = `#${colorJ}${colorI}${colorI}`
							break
						case 1:
							color = `#${colorI}${colorI}${colorJ}`
							break
						case 2:
							color = `#${colorI}${colorJ}${colorI}`
							break
						case 3:
							color = `#${colorJ}${colorI}${colorJ}`
							break
						case 4:
							color = `#${colorI}${colorJ}${colorJ}`
							break
						case 5:
							color = `#${colorJ}${colorJ}${colorI}`
							break
					}
					pollAnsForm.innerHTML += `
						<div class="pollAnsColor" style="background-color: ${color};"></div>
						<input type="text" name="pollAnsName"
						placeholder="Answer ${String.fromCharCode(i + 97)}" value="${pollAnsValues[i] || ''}">
					`
					if (i % 2) pollAnsForm.innerHTML += '<br>'
				}
			}

			function clearPollNames() {
				var pollAnsNames = document.getElementsByName('pollAnsName')
				var pollAnsValues = []
				for (let i = 0; i < pollAnsNames.length; i++) {
					pollAnsNames[i].value = ''
				}
			}

			function modeChange() {
				let modeP = document.getElementById('modeP')
				let modeL = document.getElementById('modeL')
				let modeQ = document.getElementById('modeQ')
				let modePT = document.getElementById('modePT')

				if (modeP.checked) {
					socket.emit('modechange', modeP.value)
				} else if (modeL.checked) {
					socket.emit('modechange', modeL.value)
				} else if (modeQ.checked) {
					socket.emit('modechange', modeQ.value)
				} else if (modePT.checked) {
					socket.emit('modechange', modePT.value)
				}
			}

			// Ends the poll and reloads the users page to stop any more submission
			function endPollFunc() {
				socket.emit('endPoll')
				socket.emit('reload')
				startPollForm.style.display = 'block'
				endPoll.style.display = 'none'
			}

			// makes student elements
			function buildStudent(room, student) {
				var newStudent = document.createElement("div");
				newStudent.classList.add("student");
				let studentElement = document.createElement("p");
				studentElement.innerText += student;
				newStudent.appendChild(studentElement);
				let studentData = room.students[student]
				if (studentData.break == true) {
					let breakText = document.createElement("p");
					breakText.innerText += "taking a break";
					newStudent.appendChild(breakText);
				}
				else if (studentData.break) {
					let breakDiv = document.createElement("div");
					breakDiv.setAttribute("id", "break");
					let breakNeeded = document.createElement("p");
					breakNeeded.innerText = "Needs a break";
					breakDiv.appendChild(breakNeeded);
					let breakReason = document.createElement("p");
					breakReason.innerText = `Reason: ${studentData.break}`;
					breakDiv.appendChild(breakReason);
					let breakApprove = document.createElement("button");
					breakApprove.classList.add("quickButton");
					breakApprove.onclick = approveBreak(true, studentData.username);
					breakApprove.innerText = "Approve";
					breakDiv.appendChild(breakApprove);
					let breakDeny = document.createElement("button");
					breakDeny.classList.add("quickButton");
					breakApprove.onclick = approveBreak(false, studentData.username);
					breakDeny.innerText = "Deny";
					breakDiv.appendChild(breakDeny);
					newStudent.appendChild(breakDiv);
					let lineBreak = document.createElement("br");
					newStudent.appendChild(lineBreak);
				}
				if (studentData.help) {
					let help = document.createElement("p");
					help.setAttribute("id", "help");
					help.innerText = "sent help ticket";
					if (studentData.help.reason) {
						let helpReason = document.createElement("p");
						helpReason.innerText = `reason ${studentData.help.reason}`;
						help.appendChild(helpReason);
					};
					let helpTimeDisplay = document.createElement("p");
					helpTimeDisplay.innerText = `at ${studentData.help.time.hours}:${studentData.help.time.minutes}:${studentData.help.time.seconds}`;
					help.appendChild(helpTimeDisplay);
					let deleteTicketButton = document.createElement("button");
					deleteTicketButton.classList.add("quickButton");
					deleteTicketButton.dataset.studentName = student;
					deleteTicketButton.onclick = (event) => {
						deleteTicket(event.target);
					};
					deleteTicketButton.innerText = "Delete Ticket";
					help.appendChild(deleteTicketButton);
					newStudent.appendChild(help);
					let lineBreak = document.createElement("br");
					newStudent.appendChild(lineBreak);
				}
				if (studentData.pollTextRes) {
					let pollTextResponse = document.createElement("p");
					pollTextResponse.innerText = `Poll Text: ${studentData.pollRes.textRes}`;
					newStudent.appendChild(pollTextResponse);
				};
				if (studentData.pollRes.buttonRes) {
					let pollResponse = document.createElement("p");
					pollResponse.innerText = `Poll: ${studentData.pollRes.buttonRes}`;
					newStudent.appendChild(pollResponse);
				};
				if (studentData.pollRes.textRes) {
					let textResponse = document.createElement("p");
					textResponse.innerText = `Text Response: ${studentData.pollRes.textRes}`;
					newStudent.appendChild(textResponse);
				};
				let permissionSwitch = document.createElement("select");
				permissionSwitch.setAttribute("name", "permSwitch");
				permissionSwitch.setAttribute("class", "permSwitch");
				permissionSwitch.setAttribute("data-userid", student);
				permissionSwitch.onchange = (event) => {
					updatePerms(event.target)
				};
				if (studentData.permissions == 0) {
					let teacherOption = document.createElement("option");
					teacherOption.setAttribute("value", 0);
					teacherOption.setAttribute("selected", true);
					teacherOption.innerText = "Teacher";
					permissionSwitch.add(teacherOption);
					let botOption = document.createElement("option");
					botOption.setAttribute("value", 1);
					botOption.innerText = "Bot";
					permissionSwitch.add(botOption);
					let studentOption = document.createElement("option");
					studentOption.setAttribute("value", 2);
					studentOption.innerText = "Student";
					permissionSwitch.add(studentOption);
					let guestOption = document.createElement("option");
					guestOption.setAttribute("value", 3);
					guestOption.innerText = "Guest";
					permissionSwitch.add(guestOption);
				} else if (studentData.permissions == 1) {
					let teacherOption = document.createElement("option");
					teacherOption.setAttribute("value", 0);
					teacherOption.innerText = "Teacher";
					permissionSwitch.add(teacherOption);
					let botOption = document.createElement("option");
					botOption.setAttribute("value", 1);
					botOption.setAttribute("selected", true);
					botOption.innerText = "Bot";
					permissionSwitch.add(botOption);
					let studentOption = document.createElement("option");
					studentOption.setAttribute("value", 2);
					studentOption.innerText = "Student";
					permissionSwitch.add(studentOption);
					let guestOption = document.createElement("option");
					guestOption.setAttribute("value", 3);
					guestOption.innerText = "Guest";
					permissionSwitch.add(guestOption);
				} else if (studentData.permissions == 2) {
					let teacherOption = document.createElement("option");
					teacherOption.setAttribute("value", 0);
					teacherOption.innerText = "Teacher";
					permissionSwitch.add(teacherOption);
					let botOption = document.createElement("option");
					botOption.setAttribute("value", 1);
					botOption.innerText = "Bot";
					permissionSwitch.add(botOption);
					let studentOption = document.createElement("option");
					studentOption.setAttribute("value", 2);
					studentOption.setAttribute("selected", true);
					studentOption.innerText = "Student";
					permissionSwitch.add(studentOption);
					let guestOption = document.createElement("option");
					guestOption.setAttribute("value", 3);
					guestOption.innerText = "Guest";
					permissionSwitch.add(guestOption);
				} else if (studentData.permissions == 3) {
					let teacherOption = document.createElement("option");
					teacherOption.setAttribute("value", 0);
					teacherOption.innerText = "Teacher";
					permissionSwitch.add(teacherOption);
					let botOption = document.createElement("option");
					botOption.setAttribute("value", 1);
					botOption.innerText = "Bot";
					permissionSwitch.add(botOption);
					let studentOption = document.createElement("option");
					studentOption.setAttribute("value", 2);
					studentOption.innerText = "Student";
					permissionSwitch.add(botOption);
					let guestOption = document.createElement("option");
					guestOption.setAttribute("value", 3);
					guestOption.setAttribute("selected", true);
					guestOption.innerText = "Guest";
					permissionSwitch.add(guestOption);
				}
				newStudent.appendChild(permissionSwitch);
				newStudent.append(" ");
				let deleteUserButton = document.createElement("button");
				deleteUserButton.setAttribute("class", "deleteUser");
				deleteUserButton.classList.add("quickButton");
				deleteUserButton.setAttribute("data-userid", student);
				deleteUserButton.onclick = (event) => {
					deleteUser(event.target)
				};
				deleteUserButton.innerText = "Delete User";
				newStudent.appendChild(deleteUserButton);
				return newStudent;
			}

			// filters and sorts students
			function filterSortChange() {
				permChangeList.innerHTML = ''
				let newStudent = ''
				let newRoom = JSON.parse(JSON.stringify(allRoom))

				let helpButton = document.getElementById("help");
				let breakButton = document.getElementById("break");
				let pollsButton = document.getElementById("polls");

				//filter by help
				if (filter.help == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.help) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.help == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.help) {
							delete newRoom.students[username]
						}
					}
				}

				//filter by break
				if (filter.break == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.break) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.break == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.break) {
							delete newRoom.students[username]
						}
					}
				}

				//filter by poll
				if (filter.polls == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.pollRes.buttonRes && !student.pollRes.textRes) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.polls == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.pollRes.buttonRes || student.pollRes.textRes) {
							delete newRoom.students[username]
						}
					}
				}

				//sort by name
				if (sort.name == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort())
				} else if (sort.name == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort().reverse())
				}

				//sort by help time
				if (sort.helpTime == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]

						if (objectA.help && objectB.help) {
							const dateA = new Date()
							dateA.setHours(objectA.help.time.hours)
							dateA.setMinutes(objectA.help.time.minutes)
							dateA.setSeconds(objectA.help.time.seconds)
							const dateB = new Date()
							dateB.setHours(objectB.help.time.hours)
							dateB.setMinutes(objectB.help.time.minutes)
							dateB.setSeconds(objectB.help.time.seconds)
							if (dateA < dateB) {
								return -1
							}
						}
						else if (objectA.help) return -1
					}))
				}

				//sort by poll
				if (sort.polls == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]
						console.log(objectA, objectB);
						if (objectA.pollRes.textRes && objectB.pollRes.textRes) {
							return objectA.pollRes.textRes.localeCompare(objectB.pollRes.textRes)
						} else if (objectA.pollRes.textRes) return -1
						else if (objectB.pollRes.textRes) return 1
						if (objectA.pollRes.buttonRes && objectB.pollRes.buttonRes) {
							return objectA.pollRes.buttonRes.localeCompare(objectB.pollRes.buttonRes)
						} else if (objectA.pollRes.buttonRes) return -1
						else if (objectB.pollRes.buttonRes) return 1
					}))
				} else if (sort.polls == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]
						if (objectA.pollRes.textRes && objectB.pollRes.textRes) {
							return objectB.pollRes.textRes.localeCompare(objectA.pollRes.textRes)
						} else if (objectA.pollRes.textRes) return 1
						else if (objectB.pollRes.textRes) return -1
						if (objectA.pollRes.buttonRes && objectB.pollRes.buttonRes) {
							return objectB.pollRes.buttonRes.localeCompare(objectA.pollRes.buttonRes)
						} else if (objectA.pollRes.buttonRes) return 1
						else if (objectB.pollRes.buttonRes) return -1
					}))
				}

				//sort by permissions
				if (sort.permissions == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => a[1].permissions - b[1].permissions))
				} else if (sort.permissions == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => b[1].permissions - a[1].permissions))
				}

				for (const student of Object.keys(newRoom.students)) {
					permChangeList.appendChild(buildStudent(newRoom, student))
				}
			}

			// Used to change permission of user in there class
			// Sends user data and desired permission level of the user
			function updatePerms(e) {
				socket.emit('permChange', e.dataset.userid, e.value)
				location.reload()
			}

			function makeLesson() {
				let learningObj = document.getElementById('learningObj')
				let dueAssigns = document.getElementById('dueAssigns')
				socket.emit('lessonStart', learningObj.value)
				alert('Lesson Created')
			}

			// sets filters
			for (let filterElement of document.getElementsByClassName('filter')) {
				filterElement.onclick = () => {
					filter[filterElement.id] += 1
					if (filter[filterElement.id] > 2) {
						filter[filterElement.id] = 0
					}
					if (filter[filterElement.id] == 0) filterElement.classList.remove('pressed')
					else filterElement.classList.add('pressed')
					filterElement.innerText = filterState[filterElement.id][filter[filterElement.id]]
					filterSortChange()
				}
			}

			// sets sorts
			for (let sortElement of document.getElementsByClassName('sort')) {
				sortElement.onclick = () => {
					for (let sortType of Object.keys(sort)) {
						if (sortType != sortElement.id) {
							sort[sortType] = 0
							let otherSortElements = document.querySelector('.sort#' + sortType)
							if (otherSortElements) {
								otherSortElements.classList.remove('pressed')
								otherSortElements.innerText = sortState[sortType][sort[sortType]]
							}
						}
					}
					sort[sortElement.id] += 1
					if (sortElement.id == 'helpTime' && sort[sortElement.id] > 1) {
						sort[sortElement.id] = 0
					}
					else if (sort[sortElement.id] > 2) {
						sort[sortElement.id] = 0
					}
					if (sort[sortElement.id] == 0) sortElement.classList.remove('pressed')
					else sortElement.classList.add('pressed')
					sortElement.innerText = sortState[sortElement.id][sort[sortElement.id]]
					filterSortChange()
				}
			}

			function deleteTicket(e) {
				socket.emit('deleteTicket', e.dataset.studentName)
				socket.emit('cpupdate')
			}

			function doStep(id) {
				alert('Step ' + id + ' activated')
				socket.emit('doStep', id)
				location.reload()
			}


			function makeLesson() {
				let learningObj = document.getElementById('learningObj')
				let dueAssigns = document.getElementById('dueAssigns')
				socket.emit('lessonStart', learningObj.value)
				alert('Lesson Created')
			}

			function approveBreak(breakApproval, username) {
				socket.emit('approveBreak', breakApproval, username)
			}

			var allRoom = ""
			socket.emit('cpupdate')
			socket.on('cpupdate', function (room, pollHistory) {
				room = JSON.parse(room)
				classCode.innerText = 'Class Code: ' + room.key
				buildPreviousPolls(JSON.parse(pollHistory))
				allRoom = room
				filterSortChange()
			})
			socket.emit('pluginUpdate')
			socket.on('pluginUpdate', (plugins) => {
				pluginsDiv.innerHTML = ''
				for (let plugin of plugins) {
					let pluginDiv = document.createElement('div')
					pluginDiv.id = plugin.id
					pluginDiv.className = 'plugin'
					let pluginName = document.createElement('input')
					pluginName.type = 'text'
					pluginName.value = plugin.name
					pluginName.placeholder = 'Name'
					pluginName.onchange = (event) => {
						socket.emit(
							'changePlugin',
							event.target.parentElement.id,
							event.target.value,
							null
						)
					}
					pluginDiv.appendChild(pluginName)
					let pluginURL = document.createElement('input')
					pluginURL.type = 'url'
					pluginURL.value = plugin.url
					pluginURL.placeholder = 'URL'
					pluginURL.onchange = (event) => {
						let pluginURL = event.target

						if (!pluginURL.checkValidity()) {
							pluginURL.reportValidity()
							return
						}

						socket.emit(
							'changePlugin',
							pluginURL.parentElement.id,
							null,
							pluginURL.value
						)
					}
					pluginDiv.appendChild(pluginURL)
					let removePlugin = document.createElement('button')
					removePlugin.className = 'quickButton'
					removePlugin.innerText = 'Remove Plugin'
					removePlugin.onclick = (event) => {
						socket.emit(
							'removePlugin',
							event.target.parentElement.id
						)
					}
					pluginDiv.appendChild(removePlugin)
					pluginsDiv.appendChild(pluginDiv)
				}

				let addPluginForm = document.createElement('div')
				addPluginForm.id = 'addPluginForm'
				let newPluginName = document.createElement('input')
				newPluginName.id = 'newPluginName'
				newPluginName.type = 'text'
				newPluginName.placeholder = 'Name'
				addPluginForm.append(newPluginName)
				let newPluginURL = document.createElement('input')
				newPluginURL.id = 'newPluginURL'
				newPluginURL.type = 'url'
				newPluginURL.placeholder = 'URL'
				addPluginForm.append(newPluginURL)
				let submitPlugin = document.createElement('button')
				submitPlugin.className = 'quickButton'
				submitPlugin.innerText = 'Add Plug-in'
				submitPlugin.onclick = () => {
					let newPluginName = document.getElementById('newPluginName')
					let newPluginURL = document.getElementById('newPluginURL')

					if (!newPluginURL.checkValidity()) {
						newPluginURL.reportValidity()
						return
					}

					socket.emit('addPlugin', newPluginName.value, newPluginURL.value)
				}
				addPluginForm.append(submitPlugin)
				pluginsDiv.append(addPluginForm)
			})
		</script>
		<%- include('../partials/footer_content') %>