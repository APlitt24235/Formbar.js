<%- include('../partials/header_content') %>
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>

    <body onload="load(<%-pollStatus%>)">
        <header id="quickMenu">
            <button id="users" class="quickButton" onclick="toUsers()">Users</button>
            <button id="polls" class="quickButton" onclick="toPolls()">Poll </button>
            <button id="lesson" class="quickButton" onclick="toLesson()">Make A Lesson</button>
        </header>

        <div id="permChanges">
            <div id="permChangeKey">

            </div>
            <div id="permFilterBoxes">
                Filter:
                <button type="button" id="help" class="filter">Help</button>
                <button type="button" id="break" class="">Break</button>
                <button type="button" id="polls" class="filter">Polls</button>
            </div>
            <div id="permSortBoxes">
                Sort:
                <button type="button" id="name" class="sort">Name</button>
                <button type="button" id="polls" class="sort">Polls</button>
                <button type="button" id="helpTime" class="">Help Time</button>
                <button type="button" id="permissions" class="sort">Permissions ðŸ¡‡</button>
            </div>
            <div id="permChangeList">

            </div>

        </div>
        <div id="pollChanges">
            <h2>Start/End Poll</h2>
            <form id="startPollForm" action="#">
                <label for="resNumber">How many possible responses?</label>
                <input type="number" id="resNumber">
                <label for="resTextBox">Would like to accept text responses?</label>
                <input type="checkbox" id="resTextBox">
                <label for="pollBox">Prompt for the poll?</label>
                <input type="text" id="pollBox">
                <br>
                <input type="button" id="changeNames" value="Change Names" onclick="namePollFunc()">
                <label for="changeNames">Change The Names of The Answers?</label>
                <input type="button" value="Start Poll" onclick="startPollFunc()">
                <br>
            </form>
            <form id="pollAnsForm">
            </form>
            <button id="endPoll" onclick="endPollFunc()" hidden>End Poll</button>
            <br>
            <button type="button" onclick="displayPreviousPolls()">View Previous Polls</button>
        </div>
        <div id="previousPolls">

        </div>
        <div id="lessonMaker">
            <form method="post" enctype="multipart/form-data">
                <input name="spreadsheet" type="file">
                <input type="submit">
            </form>

        </div>
    </body>

    </html>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io()

        //0 = off
        //1 = only
        //2 = except
        filter = {
            help: 0,
            polls: 0
        }
        //0 = off
        //1 = descending
        //2 = ascending
        sort = {
            name: 0,
            polls: 0,
            helpTime: 0,
            permissions: 1
        }

        filterState = {
            help: [
                'Help tickets',
                'Help tickets in',
                'Not help tickets'
            ],
            break: [
                'Break',
                'Taking a break',
                'Not taking a break'
            ],
            polls: [
                'Polls',
                'Responded to poll',
                'Did not responded to poll',
            ]
        }
        sortState = {
            name: [
                'Name',
                'Name ðŸ¡‡',
                'Name ðŸ¡…'
            ],
            polls: [
                'Polls',
                'Polls ðŸ¡‡',
                'Polls ðŸ¡…'
            ],
            helpTime: [
                'Help time',
                'Help time ðŸ¡‡',
                'Help time ðŸ¡…'
            ],
            permissions: [
                'Permissions',
                'Permissions ðŸ¡‡',
                'Permissions ðŸ¡…'
            ]
        }

        var permChanges = document.getElementById('permChanges')
        var permChangeKey = document.getElementById('permChangeKey')
        var permChangeList = document.getElementById('permChangeList')
        var pollChanges = document.getElementById('pollChanges')
        var startPoll = document.getElementById('startPoll')
        var resNumber = document.getElementById('resNumber')
        var resTextBox = document.getElementById('resTextBox')
        var endPoll = document.getElementById('endPoll')
        var startPollForm = document.getElementById('startPollForm')
        var pollPrompt = document.getElementById('pollBox')
        var permFilterBoxes = document.getElementById('permFilterBoxes')
        var pollFilter = document.getElementById('pollFilter')
        var missingPollFilter = document.getElementById('missingPollFilter')
        var lettFilter = document.getElementById('lettFilter')
        var textFilter = document.getElementById('textFilter')
        var permSort = document.getElementById('permSort')
        var permSortLabel = document.getElementById('permSortLabel')
        var helpFilter = document.getElementById('helpFilter')
        var pollAnsForm = document.getElementById('pollAnsForm')
        var lessonMaker = document.getElementById('lessonMaker')
        var previousPolls = document.getElementById('previousPolls')

        function deleteUser(e) {
            socket.emit('deleteUser', e.dataset.userid)
            socket.emit('cpupdate')
        }

        // Function runs on page load
        // Checks if poll is active or not and displays correct output
        function load(pollStatus) {
            pollChanges.style.display = 'none'
            permChanges.style.display = 'block'
            lessonMaker.style.display = 'none'
            previousPolls.style.display = 'none'
            if (pollStatus) {
                startPollForm.style.display = 'none'
                endPoll.style.display = 'block'
                lessonMaker.style.display = 'none'
                previousPolls.style.display = 'none'
            } else {
                startPollForm.style.display = 'block'
                endPoll.style.display = 'none'
                previousPolls.style.display = 'none'
                lessonMaker.style.display = 'none'
            }
        }
        // Changes to the create a poll section of the page
        function toPolls() {
            pollChanges.style.display = 'block'
            permChanges.style.display = 'none'
            lessonMaker.style.display = 'none'
            previousPolls.style.display = 'none'
        }
        // Changes to the permission change section of the page
        function toUsers() {
            pollChanges.style.display = 'none'
            permChanges.style.display = 'block'
            lessonMaker.style.display = 'none'
            previousPolls.style.display = 'none'
        }

        function toLesson() {
            pollChanges.style.display = 'none'
            permChanges.style.display = 'none'
            lessonMaker.style.display = 'block'
            previousPolls.style.display = 'none'
        }

        //displays the previos polls page
        function displayPreviousPolls() {
            pollChanges.style.display = 'none'
            permChanges.style.display = 'none'
            lessonMaker.style.display = 'none'
            previousPolls.style.display = 'block'
        }
        //makes the previous polls page
        function buildPreviousPolls(data) {
            previousPolls.innerHTML = ''
            for (let i = data.length - 1; i >= 0; i--) {
                previousPolls.innerHTML += `<button type="button" onclick="displayPoll(${data[i].id})">${data[i].date}</button>` + '</br>'
            }

        }

        function displayPoll(data) {
            console.log(data)
            socket.emit('previousPollDisplay', data)
        }
        socket.on('previousPollData', function (data) {
            previousPolls.innerHTML = 'Prompt: ' + data.prompt + '</br>'

            for (let i = 0; i < data.names.length; i++) {
                previousPolls.innerHTML += 'Name: ' + data.names[i] + '</br>'
                previousPolls.innerHTML += 'Letter: ' + data.letter[i] + '</br>'
                previousPolls.innerHTML += 'Text: ' + data.text[i] + '</br></br>'


            }
            previousPolls.innerHTML += `<button type="button" onclick="socket.emit('cpupdate')">Return To Selection</button>`
        })
        // Starts a new poll that allows students to submit answers
        // Check how many possible responses and if the teacher wants to accept text responses
        function startPollFunc() {
            var pollAnsNames = document.getElementsByName('pollAnsName')
            var pollAnsValues = []
            for (let i = 0; i < pollAnsNames.length; i++) {
                pollAnsValues.push(pollAnsNames[i].value)
            }
            pollAnsForm.style.display = 'none'
            startPollForm.style.display = 'none'
            endPoll.style.display = 'block'
            permChanges.style.display = 'none'
            socket.emit('startPoll', resNumber.value, resTextBox.checked, pollPrompt.value, pollAnsValues)
            socket.emit('reload') // Reloads the users page
        }

        function namePollFunc() {
            pollAnsForm.style.display = 'block'
            pollAnsForm.innerHTML = ''
            for (let i = 0; i < resNumber.value; i++) {
                pollAnsForm.innerHTML += `<input type="text" name="pollAnsName" id="pollNames" placeholder="answer${i + 1}">`

            }



        }
        // Ends the poll and reloads the users page to stop any more submission
        function endPollFunc() {
            socket.emit('endPoll')
            socket.emit('reload')
            startPollForm.style.display = 'block'
            endPoll.style.display = 'none'
        }

        function buildStudent(room, student) {
            var newStudent = ''
            newStudent += `<p>${student}</p>`
            let studentData = room.students[student]
            if (studentData.help)
                newStudent += `<p>${studentData.help}</p>`
            if (studentData.pollTextRes)
                newStudent += `<p>Poll Text: ${studentData.pollTextRes}</p>`
            if (studentData.pollRes)
                newStudent += `<p>Poll: ${studentData.pollRes}</p>`
            newStudent += `<select name="permSwitch" class="quickButton" id="permSwitch" data-userid="${student}" onchange="updatePerms(this);"> `
            if (studentData.permissions == 0) {
                newStudent += `
                        <option value="0" selected>Teacher</option>
                        <option value="1">Bot</option>
                        <option value="2">Student</option>
                        <option value="3">Guest</option>
                    `
            } else if (studentData.permissions == 1) {
                newStudent += `
                        <option value="0">Teacher</option>
                        <option value="1" selected>Bot</option>
                        <option value="2">Student</option>
                        <option value="3">Guest</option>
                    `
            } else if (studentData.permissions == 2) {
                newStudent += `
                        <option value="0" selected>Teacher</option>
                        <option value="1">Bot</option>
                        <option value="2" selected>Student</option>
                        <option value="3">Guest</option>
                    `
            } else if (studentData.permissions == 3) {
                newStudent += `
                        <option value="0" selected>Teacher</option>
                        <option value="1">Bot</option>
                        <option value="2">Student</option>
                        <option value="3" selected>Guest</option>
                    `
            }
            newStudent += '</select>'
            newStudent += `<button id="deleteUser" class="quickButton" data-userid="${student}"  onclick="deleteUser(this)">Delete User</button>`
            return newStudent
        }

        function filterSortChange() {
            permChangeList.innerHTML = ''
            let newStudent = ''
            let newRoom = JSON.parse(JSON.stringify(allRoom))
            //filter by help
            if (filter.help == 1) {
                for (let [username, student] of Object.entries(newRoom.students)) {
                    if (!student.help) {
                        delete newRoom.students[username]
                    }
                }
            } else if (filter.help == 2) {
                for (let [username, student] of Object.entries(newRoom.students)) {
                    if (student.help) {
                        delete newRoom.students[username]
                    }
                }
            }
            //filter by poll
            if (filter.polls == 1) {
                for (let [username, student] of Object.entries(newRoom.students)) {
                    if (!student.pollRes && !student.pollTextRes) {
                        delete newRoom.students[username]
                    }
                }
            } else if (filter.polls == 2) {
                for (let [username, student] of Object.entries(newRoom.students)) {
                    if (student.pollRes || student.pollTextRes) {
                        delete newRoom.students[username]
                    }
                }
            }
            //sort by name
            if (sort.name == 1) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort())
            } else if (sort.name == 2) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort().reverse())
            }
            //sort by help time
            //sort by poll
            if (sort.polls == 1) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
                    objectA = entireA[1]
                    objectB = entireB[1]
                    if (objectA.pollTextRes && objectB.pollTextRes) {
                        return objectA.pollTextRes.localeCompare(objectB.pollTextRes)
                    } else if (objectA.pollTextRes) return -1
                    else if (objectB.pollTextRes) return 1
                    if (objectA.pollRes && objectB.pollRes) {
                        return objectA.pollRes.localeCompare(objectB.pollRes)
                    } else if (objectA.pollRes) return -1
                    else if (objectB.pollRes) return 1
                    else return objectA.username.localeCompare(objectB.username)
                }))
            } else if (sort.polls == 2) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
                    objectA = entireA[1]
                    objectB = entireB[1]
                    if (objectA.pollTextRes && objectB.pollTextRes) {
                        return objectB.pollTextRes.localeCompare(objectA.pollTextRes)
                    } else if (objectA.pollTextRes) return 1
                    else if (objectB.pollTextRes) return -1
                    if (objectA.pollRes && objectB.pollRes) {
                        return objectB.pollRes.localeCompare(objectA.pollRes)
                    } else if (objectA.pollRes) return 1
                    else if (objectB.pollRes) return -1
                    else return objectB.username.localeCompare(objectA.username)
                }))
            }
            //sort by permissions
            if (sort.permissions == 1) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => a[1].permissions - b[1].permissions))
            } else if (sort.permissions == 2) {
                newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => b[1].permissions - a[1].permissions))
            }

            for (const student of Object.keys(newRoom.students)) {
                newStudent += buildStudent(newRoom, student)
            }
            permChangeList.innerHTML += newStudent
        }

        // Used to change permission of user in there class
        // Sends user data and desired permission level of the user
        function updatePerms(e) {
            socket.emit('permChange', e.dataset.userid, e.value)
            socket.emit('cpupdate')
        }

        function makeLesson() {
            let learningObj = document.getElementById('learningObj')
            let dueAssigns = document.getElementById('dueAssigns')
            socket.emit('lessonStart', learningObj.value)
            alert('Lesson Created')
        }

        for (let filterElement of document.getElementsByClassName('filter')) {
            filterElement.onclick = () => {
                filter[filterElement.id] += 1
                if (filter[filterElement.id] > 2) {
                    filter[filterElement.id] = 0
                }
                filterElement.innerText = filterState[filterElement.id][filter[filterElement.id]]
                filterSortChange()
            }
        }

        for (let sortElement of document.getElementsByClassName('sort')) {
            sortElement.onclick = () => {
                for (let sortType of Object.keys(sort)) {
                    if (sortType != sortElement.id) {
                        sort[sortType] = 0
                        let otherSortElements = document.querySelector('.sort#' + sortType)
                        if (otherSortElements)
                            otherSortElements.innerText = sortState[sortType][sort[sortType]]
                    }
                }
                sort[sortElement.id] += 1
                if (sort[sortElement.id] > 2) {
                    sort[sortElement.id] = 0
                }
                sortElement.innerText = sortState[sortElement.id][sort[sortElement.id]]
                filterSortChange()
            }
        }

        var allRoom = ""
        socket.emit('cpupdate')
        socket.on('cpupdate', function (room, pollHistory) {
            room = JSON.parse(room)
            buildPreviousPolls(JSON.parse(pollHistory))
            allRoom = room
            filterSortChange()
        })
    </script>
    <%- include('../partials/footer_content') %>