<!DOCTYPE html>
<html lang="en">
<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<%- include('../partials/formbar_header') %>

			<head>
				<style>
					#vbContainer {
						top: 75px;
						height: 85%;
						justify-self: center;
					}
				</style>
				<script src="/js/isObjectEqual.js"></script>
			</head>

			<body>
				<% if (currentUser.classPermissions>= STUDENT_PERMISSIONS) { %>
					<div id="lessonContent">
						<%if(lesson.content !=undefined){%>
							<h3 id="headerText">
								<%- lesson.date %>
							</h3>
							<% for (let i=0; i < lesson.content.length; i++) { %>
								<u>
									<h2 id="headerText">
										<%-lesson.content[i][0]%>
									</h2>
								</u>
								<% for (let u=1; u < lesson.content[i].length; u++) { %>
									<b id="headerText">
										<%- lesson.content[i][u]%>
									</b><br>
									<% } %>
										<% } %>
											<br>
											<a href="/previousLessons" class="quickButton">Go To A Previous Lesson</a>
											<% } else { %>
												<h1 id="headerText" class="textColorContent">No active lesson</h1>
												<a href="/previousLessons" class="quickButton">Go To A Previous
													Lesson</a>
												<% } %>
					</div>
					<div id="pollContent">
						<h1 id="noPoll" class="textColorContent">No active poll</h1>
						<div id="poll">
							<u>
								<h2 id="pollPrompt">

								</h2>
							</u>
							<form id="pollForm"></form>
							<br>
							<button onclick="submitPoll()" class="quickButton">Submit</button>
						</div>
					</div>
					<div id="quizContent">
						<form id="quizForm" method="post" action="/student">
						</form>
					</div>
					<% } %>

						<!-- Virtual Bar -->
						<div id="vbContainer">
							<canvas id='virtualbar' style="height:900px; width:969px;"></canvas>
						</div>

						<% if (currentUser.classPermissions>= STUDENT_PERMISSIONS) { %>
							<br>
							<div>
								<h1>Need Help?</h1>
								<form id="eventForm">
									<textarea id="ticket" cols="30" rows="5" maxlength="150"
										placeholder="Reason (optional)"></textarea>
									<!-- <input type="text" id="ticket" class="quickButton" placeholder="Reason(optional)"> -->
								</form>
								<button onclick="help()" class="quickButton">Send Ticket</button>
							</div>
							<br>
							<div>
								<h1>Need a Break?</h1>
								<button class="breakButton"
									onclick="{document.getElementById('requestBreakDialog').showModal()}">
									Take Break
								</button>
							</div>
							<%- include('../partials/body_content') %>

								<dialog id="requestBreakDialog" class="contentBox">
									<form
										onsubmit="submitBreak(event);document.getElementById('bathroom').checked = false;document.getElementById('other').checked = false;">
										<h3 style="margin-top: 0;">Take a break</h3>
										<div id="breakInputs" class="centered">
											<label class="form-control" id="pollControl" for="bathroom">
												<input type="radio" name="option" id="bathroom" value="Bathroom"
													required>
												Bathroom
											</label>
											<label class="form-control" id="pollControl" for="other">
												<input type="radio" name="option" id="other" value="other">
												Other
											</label>
											<textarea class="hidden" id="otherText" cols="25" rows="3"
												maxlength="150"></textarea>
										</div>
										<div id="takeBreak" class="hCentered">
											<button class="quickButton" id="cancel" type="button"
												onclick="document.getElementById('bathroom').checked = false;document.getElementById('other').checked = false;document.getElementById('requestBreakDialog').close();">Cancel</button>
											<button class="quickButton" type="submit">Take Break</button>
										</div>
									</form>
								</dialog>
								<% } %>
			</body>

			<script>
				let noPoll = null
			</script>

			<% if (currentUser.classPermissions>= STUDENT_PERMISSIONS) { %>
				<script type="text/javascript">
					//letiable creation
					let resTextBox = document.getElementById('resTextBox')
					let pollForm = document.getElementById('pollForm')
					let pollContent = document.getElementById('pollContent')
					let quizContent = document.getElementById('quizContent')
					let lessonContent = document.getElementById('lessonContent')
					noPoll = document.getElementById('noPoll')
					let pollDiv = document.getElementById('poll')
					let pollPromptDisplay = document.getElementById('pollPrompt')

					let oldLettRes = '<%- myRes %>'
					let oldTextRes = '<%- myTextRes %>'

					let poll = {}
					let mode = ''
					let quiz = {}
					function updatePageLoop() {
						if (mode == 'poll') {
							pollContent.style.display = 'block'
							quizContent.style.display = 'none'
							lessonContent.style.display = 'none'

							if (poll.status) {
								noPoll.style.display = 'none'
								pollDiv.style.display = 'block'

								pollForm.innerHTML = ''

								pollPromptDisplay.innerText = poll.prompt

								// Creates all selectable answers and displays them to the user
								for (let response of Object.values(poll.responses)) {
									pollForm.innerHTML += `
										<label class="form-control" id="pollControl" style="color: ${response.color}; --theme-color: black;">
											<input type="radio" name="poll" id="${response.answer}" value="${response.answer}">
											${response.answer}
										</label>
									`
								}
								pollForm.innerHTML += `
										<label class="form-control" id="pollControl" style="--theme-color: hsl(0, 0%, 70%);">
											<input type="radio" name="poll" id="remove" value="remove">
											remove
										</label>
									`
								if (poll.textRes) {
									pollForm.innerHTML += `<br><textarea name="resText" cols="50" rows="15" id="resTextBox" value="${oldTextRes}"></textarea>`
								}
							} else {
								noPoll.style.display = 'block'
								pollDiv.style.display = 'none'
							}

							if (oldLettRes && document.getElementById(oldLettRes)) {
								document.getElementById(oldLettRes).checked = true
							}
						} else if (mode == 'quiz') {
							pollContent.style.display = 'none'
							quizContent.style.display = 'block'
							lessonContent.style.display = 'none'
							let correctAnswerIndex = []
							let quizForm = document.getElementById('quizForm')

							for (let i = 0; i < quiz.questions.length; i++) {
								quizForm.innerHTML += `</br><br><b class="textColorContent">${quiz.questions[i][0]}</b>`
								correctAnswerIndex.push(quiz.questions[i][1])
								for (let u = 2; u < quiz.questions[i].length; u++) {
									quizForm.innerHTML += `</br><input type="checkbox" name="question" value="${u - 1}"> ${quiz.questions[i][u]}`
								}
							}
							quizForm.innerHTML += `</br><br><button type="submit" class="quickButton">Submit Answers</button>`
						} else if (mode == 'lesson') {
							pollContent.style.display = 'none'
							quizContent.style.display = 'none'
							lessonContent.style.display = 'block'
						}
						pollContent.style.display = 'block'
					}
					function updatePage() {
						var runUpdatePageLoop = true
						let userTags = currentUser.tags
						if (currentUser.tags) userTags = currentUser.tags.split(',')
						else userTags = []
						console.log(poll);
						if (currentUser.break === true) {
							runUpdatePageLoop = false
							return
						}
						if (poll.requiredTags.length > 0) {
							if (poll.requiredTags[0][0] == "0") {
								if (poll.requiredTags.slice(1).join() == userTags.join()) {
									console.log("Same tags");
									runUpdatePageLoop = true

								}
								else runUpdatePageLoop = false
							}
							else if (poll.requiredTags[0][0] == "1") {
								let correctTags = 0
								let requiredCorrectTags = poll.requiredTags.length - 1;
								for (let i = 0; i < poll.requiredTags.length; i++) {
									for (let u = 0; u < userTags.length; u++) {
										if (poll.requiredTags[i] == userTags[u]) {
											//console.log("Correct tag");
											correctTags++;
										}
									}
								}
								if (correctTags == requiredCorrectTags) {
									console.log("Correct tags");
									runUpdatePageLoop = true

								}
								else runUpdatePageLoop = false
							}
						}
						if (poll.studentBoxes.length > 0) {
							for (let studentName of poll.studentBoxes) {
								if (studentName == currentUser.username) {
									console.log("You are in the box");
									runUpdatePageLoop = true
									break
								}
								else runUpdatePageLoop = false
							}
						}
						if (poll.studentIndeterminate.length > 0) {
							for (let studentName of poll.studentIndeterminate) {
								if (studentName == currentUser.username) {
									console.log("You are in the box of not being allowed in the poll");
									runUpdatePageLoop = false
									break
								}
								else runUpdatePageLoop = true
							}
						}
						if (poll.requiredTags.length == 0 && poll.studentBoxes.length == 0 && poll.studentIndeterminate.length == 0) {
							runUpdatePageLoop = true
						}
						if (runUpdatePageLoop) {
							updatePageLoop()
						}
					}

					// Submits the users answer to the poll
					// Takes the pollResponses value which defines the number of possible answers
					function submitPoll() {
						let radios = document.getElementsByName('poll')
						let textarea = document.getElementById("resTextBox")
						let lettRes = ''
						let textRes = ''
						//Subtract 2 from radios.length to make sure the bathroom break does not interfere with radio values and lettRes
						for (let i = 0; i < radios.length; i++) {
							if (radios[i].type === 'radio' && radios[i].checked) {
								// Defines the letter response of the user
								lettRes = radios[i].value
							}
						}


						if (textarea)
							textRes = textarea.value

						// Sends user input to the server
						socket.emit('pollResp', lettRes, textRes)

						let alertText = ''
						setTimeout(() => {
							if (lettRes)
								alertText += 'Response submitted: ' + lettRes
							else if (oldLettRes)
								alertText += 'Response removed'
							else if (document.getElementById('remove').checked)
								alertText += 'No poll response to remove'
							if (textRes) {
								if (alertText) alertText += '\n'
								alertText += 'Text response submitted: ' + textRes
							} else if (oldTextRes) {
								if (alertText) alertText += '\n'
								alertText += 'Text response removed'
							}
							if (alertText) alert(alertText)

							oldLettRes = lettRes
							oldTextRes = textRes
						}, 100)

					}

					socket.emit('pollUpdate')
					socket.on('pollUpdate', (newPoll) => {
						if (isObjectEqual(poll, newPoll)) return

						poll = newPoll
						updatePage()
					})

					socket.emit('modeUpdate')
					socket.on('modeUpdate', (newMode) => {
						if (mode == newMode) return

						mode = newMode
						updatePage()
					})

					socket.emit('quizUpdate')
					socket.on('quizUpdate', (newQuiz) => {
						if (isObjectEqual(quiz, newQuiz)) return

						quiz = newQuiz
						updatePage()
					})

					//help ticket/break button

					function help() {
						let reason = document.getElementById('ticket').value
						socket.emit('help', reason)
						alert('Help ticket sent')
					}

					let options = document.getElementsByName('option')
					for (let option of options) {
						option.onchange = () => {
							let otherRadio = document.getElementById('other')
							let otherText = document.getElementById('otherText')

							if (otherRadio.checked) {
								otherText.required = true
								otherText.classList.remove('hidden')
							}
							else {
								otherText.required = false
								otherText.classList.add('hidden')
							}
						}
					}

					function submitBreak() {
						event.preventDefault()
						document.getElementById('requestBreakDialog').close()

						let reason = document.querySelector('input[name=option]:checked').value
						if (reason == 'other')
							reason = document.getElementById('otherText').value

						socket.emit('requestBreak', reason)
					}
				</script>
				<% } %>

					<script src="js/chart.js"></script>
					<script>
						let virtualBar = document.getElementById("virtualbar");
						let mychart = virtualBar.getContext("2d");
						let doughnutChart = new Chart(mychart, {

							type: 'doughnut',
							data: {
								labels: [],
								datasets: [{
									backgroundColor: [],
									data: []
								}]
							},
							options: {
								responsive: true,
								maintainAspectRatio: false,
								plugins: {
									legend: {
										labels: {
											font: {
												size: 20
											},
											color: 'black'
										}

									}
								}
							}
						})

						// Calls for data
						socket.emit('vbUpdate')
						// Gets data from server and send it the function
						socket.on('vbUpdate', (pollsData) => {
							if (!pollsData.status && Object.keys(pollsData.polls).length == 0) {
								if (noPoll)
									noPoll.style.display = ''
								virtualBar.style.display = "none";
								return
							}

							if (noPoll)
								noPoll.style.display = 'none'
							virtualBar.style.display = "block";

							//reset virtual bar
							doughnutChart.data.datasets[0].backgroundColor = []
							doughnutChart.data.datasets[0].data = []

							let totalStudents = pollsData.totalStudents
							let totalResponses = 0

							// add up all poll responses
							for (const poll of Object.values(pollsData.polls)) {
								totalResponses += poll.responses
							}

							// make the polls blind unless all students answered
							if (totalStudents == totalResponses) {
								pollsData.blindPoll = false
							}

							let labelsArray = []
							let pollArray = []

							let studResponses = {}
							// Loops through object to get each label of the possible answers
							// Also, create a new letiable for each possible answer
							if (pollsData.blindPoll) {
								labelsArray.push('Responses')
								studResponses.responses = 0
							} else {
								for (const [poll, pollData] of Object.entries(pollsData.polls)) {
									labelsArray.push(pollData.answer)
									studResponses[poll] = 0
								}
							}
							labelsArray.push('No Response')
							studResponses.noResponse = 0

							// Loops through all possible answers and generates a new color letiant for each answer
							// All possible answers should have a different color
							if (pollsData.blindPoll) {
								doughnutChart.data.datasets[0].backgroundColor.push('#FFAA00')
							} else {
								for (let poll of Object.values(pollsData.polls)) {
									doughnutChart.data.datasets[0].backgroundColor.push(poll.color)
								}
							}
							doughnutChart.data.datasets[0].backgroundColor.push('#E1E1E1')
							// Loops through all student answers and adds them to a total tally
							// Student response corresponds with a property name in studResponses
							studResponses.noResponse += totalStudents - totalResponses
							for (const [poll, pollData] of Object.entries(pollsData.polls)) {
								if (pollsData.blindPoll)
									studResponses.responses += pollData.responses
								else studResponses[poll] += pollData.responses
							}

							for (const responses of Object.keys(studResponses)) {
								pollArray.push(studResponses[responses])
							}

							doughnutChart.data.labels = labelsArray
							doughnutChart.data.datasets[0].data = pollArray
							doughnutChart.update()
						})
					</script>

					<%- include('../partials/footer_content') %>

</html>