<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<!DOCTYPE html>
		<html lang="en">

		<head>
			<meta charset="UTF-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<script src="/js/tabs.js" defer></script>
		</head>

		<body">
			<%- include('../partials/formbar_header') %>
				<header id="quickMenu">
					<button id="usersMenu" class="quickButton tab pressed" data-tab-group="mainTabs">Users</button>
					<button id="settingsMenu" class="quickButton tab" data-tab-group="mainTabs">Settings</button>
				</header>

				<div id="usersMenu" class="tabContent default" data-tab-group="mainTabs">
					<div id="userFilterBoxes" class="options">
						<h2 class="headerText">Filter</h2>
						<button type="button" id="break" class="filter">Break</button>
					</div>
					<div id="userSortBoxes" class="options">
						<h2 class="headerText">Sort</h2>
						<button type="button" id="name" class="sort">Name</button>
						<button type="button" id="permissions" class="sort pressed">Permissions ðŸ¡‡</button>
					</div>
					<button id="deleteStudents" onclick="((event) => {socket.emit('deleteStudents')})()">
						Delete All Students
					</button>
					<button id="endClass" onclick="((event) => {socket.emit('endClass');location.reload()})()">
						End Class
					</button>
					<div id="users">
					</div>
				</div>
				<div id="settingsMenu" class="tabContent" data-tab-group="mainTabs">
					<div class="options">
						<button id="permissions" class="quickButton tab pressed" data-tab-group="settingsTabs">Permissions</button>
						<button id="plugins" class="quickButton tab" data-tab-group="settingsTabs">Plugins</button>
					</div>
					<div id="permissions" class="tabContent default" data-tab-group="settingsTabs">
						<h2>Permissions</h2>
						<div id="permissionsList"></div>
					</div>
				</div>
				<!-- <button onclick="socket.emit('sharePollToClass', 5 , 'npm5')">click me</button> -->
				<%- include('../partials/body_content') %>
					</body>

		</html>
		<script>
			let currentUser = JSON.parse('<%-currentUser%>')
			let userCustomPolls = []
			let classroomCustomPolls = []
			let publicCustomPolls = []
			let customPolls = []
			let editingPollId = null
			let currentSharePollId = null
			let currentSharePollType = null

			const FilterState = {
				break: [
					'Break',
					'Taking a break',
					'Not taking a break'
				]
			}

			const SortState = {
				name: [
					'Name',
					'Name ðŸ¡‡',
					'Name ðŸ¡…'
				],
				permissions: [
					'Permissions',
					'Permissions ðŸ¡‡',
					'Permissions ðŸ¡…'
				]
			}

			// 0 = off
			// 1 = only
			// 2 = except
			let filter = {
				break: 0
			}
			// 0 = off
			// 1 = descending
			// 2 = ascending
			let sort = {
				name: 0,
				permissions: 1
			}

			let letterString = "abcdefghijklmnopqrstuvwxyz"
			let generatedColors = []
			let pollResponses = []
			let colorPickers = []

			var usersDiv = document.getElementById('users')
			var resNumber = document.getElementById('resNumber')
			var resTextBox = document.getElementById('resTextBox')
			var endPoll = document.getElementById('endPoll')
			var clearPoll = document.getElementById('clearPoll')
			var startPollForm = document.getElementById('startPollForm')
			var pollPrompt = document.getElementById('pollBox')
			var pollFilter = document.getElementById('pollFilter')
			var missingPollFilter = document.getElementById('missingPollFilter')
			var lettFilter = document.getElementById('lettFilter')
			var textFilter = document.getElementById('textFilter')
			var permSort = document.getElementById('permSort')
			var permSortLabel = document.getElementById('permSortLabel')
			var helpFilter = document.getElementById('helpFilter')
			var responsesDiv = document.getElementById('responses')
			let resetAnswerNamesButton = document.getElementById('resetAnswerNames')
			let resetColorsButton = document.getElementById('resetColors')
			let settingsDiv = document.querySelector('.tabContent#settingsMenu')
			var pluginsDiv = document.querySelector('.tabContent#plugins')
			var previousPolls = document.getElementById('previousPolls')
			var previousPollButtons = document.getElementById('previousPollButtons')
			var toPollsButton = document.getElementById('toPolls')
			var toPollHistoryButton = document.getElementById('toPollHistory')
			let blindCheck = document.getElementById('blind')
			var classCode = document.getElementById('classCode')
			var menuUsers = document.getElementById('menuUsers')
			var menuPolls = document.getElementById('menuPolls')
			var mainPolls = document.getElementById('menuPolls')
			var menuLesson = document.getElementById('menuLesson')
			var menuPlugins = document.getElementById('menuPlugins')
			let unloadPollButton = document.getElementById('unload-poll')
			let savePollButton = document.getElementById('save-poll')
			let deletePollButton = document.getElementById('delete-poll')
			let sharePollDialog = document.getElementById('sharePollDialog')
			let sharePollUserInput = document.getElementById('sharePollUserInput')
			let sharePollClassInput = document.getElementById('sharePollClassInput')
			let permissionsDiv = document.querySelector('#permissionsList')
			let usersTabButton = document.querySelector('.tab#userMenu')
			let bannedTabButton = document.querySelector('.tab#bannedMenu')
			let pollsTabButton = document.querySelector('.tab#pollsMenu')
			let settingsTabButton = document.querySelector('.tab#settingsMenu')
			let permissionsTabButton = document.querySelector('.tab#permissions')
			let pluginsTabButton = document.querySelector('.tab#plugins')

			function camelCaseToNormal(str) {
				let result = str.replace(/([A-Z])/g, " $1")
				result = result.charAt(0).toUpperCase() + result.slice(1)
				return result
			}

			// makes student elements
			function buildStudent(room, student) {
				var newStudent = document.createElement("div");
				newStudent.classList.add("student");
				let studentElement = document.createElement("p");
				studentElement.innerText += student;
				newStudent.appendChild(studentElement);
				let studentData = room.students[student]
				if (studentData.break == true) {
					let breakText = document.createElement("p");
					breakText.innerText += "taking a break";
					newStudent.appendChild(breakText);
				}
				else if (studentData.break) {
					let breakDiv = document.createElement("div");
					breakDiv.setAttribute("id", "break");
					let breakNeeded = document.createElement("p");
					breakNeeded.innerText = "Needs a break";
					breakDiv.appendChild(breakNeeded);
					let breakReason = document.createElement("p");
					breakReason.innerText = `Reason: ${studentData.break} `;
					breakDiv.appendChild(breakReason);
					let breakApprove = document.createElement("button");
					breakApprove.classList.add("quickButton");
					breakApprove.onclick = () => { approveBreak(true, studentData.username) };
					breakApprove.innerText = "Approve";
					breakDiv.appendChild(breakApprove);
					let breakDeny = document.createElement("button");
					breakDeny.classList.add("quickButton");
					breakDeny.onclick = () => { approveBreak(false, studentData.username) };
					breakDeny.innerText = "Deny";
					breakDiv.appendChild(breakDeny);
					newStudent.appendChild(breakDiv);
					let lineBreak = document.createElement("br");
					newStudent.appendChild(lineBreak);
				}
				if (studentData.help) {
					let help = document.createElement("p");
					help.setAttribute("id", "help");
					help.innerText = "sent help ticket";
					if (studentData.help.reason) {
						let helpReason = document.createElement("p");
						helpReason.innerText = `reason ${studentData.help.reason} `;
						help.appendChild(helpReason);
					};
					let helpTimeDisplay = document.createElement("p");
					helpTimeDisplay.innerText = `at ${studentData.help.time.hours}:${studentData.help.time.minutes}:${studentData.help.time.seconds} `;
					help.appendChild(helpTimeDisplay);
					let deleteTicketButton = document.createElement("button");
					deleteTicketButton.classList.add("quickButton");
					deleteTicketButton.dataset.studentName = student;
					deleteTicketButton.onclick = (event) => {
						deleteTicket(event.target);
					};
					deleteTicketButton.innerText = "Delete Ticket";
					help.appendChild(deleteTicketButton);
					newStudent.appendChild(help);
					let lineBreak = document.createElement("br");
					newStudent.appendChild(lineBreak);
				}
				if (studentData.pollTextRes) {
					let pollTextResponse = document.createElement("p");
					pollTextResponse.innerText = `Poll Text: ${studentData.pollRes.textRes} `;
					newStudent.appendChild(pollTextResponse);
				};
				if (studentData.pollRes.buttonRes) {
					let pollResponse = document.createElement("p");
					pollResponse.innerText = `Poll: ${studentData.pollRes.buttonRes} `;
					newStudent.appendChild(pollResponse);
				};
				if (studentData.pollRes.textRes) {
					let textResponse = document.createElement("p");
					textResponse.innerText = `Text Response: ${studentData.pollRes.textRes}`;
					newStudent.appendChild(textResponse);
				};
				if (studentData.classPermissions < currentUser.classPermissions) {
					let permissionSwitch = document.createElement("select");
					permissionSwitch.setAttribute("name", "permSwitch");
					permissionSwitch.setAttribute("class", "permSwitch");
					permissionSwitch.setAttribute("data-userid", student);
					permissionSwitch.onchange = (event) => {
						socket.emit('classPermChange', event.target.dataset.userid, event.target.value)
					};
					if (studentData.classPermissions == 4) {
						let teacherOption = document.createElement("option");
						teacherOption.setAttribute("value", 4);
						teacherOption.setAttribute("selected", true);
						teacherOption.innerText = "Teacher";
						permissionSwitch.add(teacherOption);
						let modOption = document.createElement("option");
						modOption.setAttribute("value", 3);
						modOption.innerText = "Mod";
						permissionSwitch.add(modOption);
						let studentOption = document.createElement("option");
						studentOption.setAttribute("value", 2);
						studentOption.innerText = "Student";
						permissionSwitch.add(studentOption);
						let guestOption = document.createElement("option");
						guestOption.setAttribute("value", 1);
						guestOption.innerText = "Guest";
						permissionSwitch.add(guestOption);
					} else if (studentData.classPermissions == 3) {
						let teacherOption = document.createElement("option");
						teacherOption.setAttribute("value", 4);
						teacherOption.innerText = "Teacher";
						permissionSwitch.add(teacherOption);
						let modOption = document.createElement("option");
						modOption.setAttribute("value", 3);
						modOption.setAttribute("selected", true);
						modOption.innerText = "Mod";
						permissionSwitch.add(modOption);
						let studentOption = document.createElement("option");
						studentOption.setAttribute("value", 2);
						studentOption.innerText = "Student";
						permissionSwitch.add(studentOption);
						let guestOption = document.createElement("option");
						guestOption.setAttribute("value", 1);
						guestOption.innerText = "Guest";
						permissionSwitch.add(guestOption);
					} else if (studentData.classPermissions == 2) {
						let teacherOption = document.createElement("option");
						teacherOption.setAttribute("value", 4);
						teacherOption.innerText = "Teacher";
						permissionSwitch.add(teacherOption);
						let modOption = document.createElement("option");
						modOption.setAttribute("value", 3);
						modOption.innerText = "Mod";
						permissionSwitch.add(modOption);
						let studentOption = document.createElement("option");
						studentOption.setAttribute("value", 2);
						studentOption.setAttribute("selected", true);
						studentOption.innerText = "Student";
						permissionSwitch.add(studentOption);
						let guestOption = document.createElement("option");
						guestOption.setAttribute("value", 1);
						guestOption.innerText = "Guest";
						permissionSwitch.add(guestOption);
					} else if (studentData.classPermissions == 1) {
						let teacherOption = document.createElement("option");
						teacherOption.setAttribute("value", 4);
						teacherOption.innerText = "Teacher";
						permissionSwitch.add(teacherOption);
						let modOption = document.createElement("option");
						modOption.setAttribute("value", 3);
						modOption.innerText = "Mod";
						permissionSwitch.add(modOption);
						let studentOption = document.createElement("option");
						studentOption.setAttribute("value", 2);
						studentOption.innerText = "Student";
						permissionSwitch.add(studentOption);
						let guestOption = document.createElement("option");
						guestOption.setAttribute("value", 1);
						guestOption.setAttribute("selected", true);
						guestOption.innerText = "Guest";
						permissionSwitch.add(guestOption);
					}
					newStudent.appendChild(permissionSwitch);
					newStudent.append(" ");
					let banStudentButton = document.createElement("button")
					banStudentButton.className = 'banStudent quickButton'
					banStudentButton.setAttribute("data-user", student)
					banStudentButton.innerText = "Ban User"
					banStudentButton.onclick = (event) => {
						socket.emit('banStudent', student)
					}
					newStudent.appendChild(banStudentButton)
					let deleteStudentButton = document.createElement("button")
					deleteStudentButton.className = 'deleteStudent quickButton'
					deleteStudentButton.setAttribute("data-userid", student)
					deleteStudentButton.onclick = (event) => {
						socket.emit('deleteStudent', student)
					};
					deleteStudentButton.innerText = "Delete User"
					newStudent.appendChild(deleteStudentButton)
				}
				return newStudent;
			}

			// filters and sorts students
			function filterSortChange() {
				usersDiv.innerHTML = ''
				let newStudent = ''
				let newRoom = JSON.parse(JSON.stringify(allRoom))

				let helpButton = document.getElementById("help");
				let breakButton = document.getElementById("break");
				let pollsButton = document.getElementById("polls");

				//filter by help
				if (filter.help == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.help) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.help == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.help) {
							delete newRoom.students[username]
						}
					}
				}

				//filter by break
				if (filter.break == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.break) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.break == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.break) {
							delete newRoom.students[username]
						}
					}
				}

				//filter by poll
				if (filter.polls == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.pollRes.buttonRes && !student.pollRes.textRes) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.polls == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.pollRes.buttonRes || student.pollRes.textRes) {
							delete newRoom.students[username]
						}
					}
				}

				//sort by name
				if (sort.name == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort())
				} else if (sort.name == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort().reverse())
				}

				//sort by help time
				if (sort.helpTime == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]

						if (objectA.help && objectB.help) {
							const dateA = new Date()
							dateA.setHours(objectA.help.time.hours)
							dateA.setMinutes(objectA.help.time.minutes)
							dateA.setSeconds(objectA.help.time.seconds)
							const dateB = new Date()
							dateB.setHours(objectB.help.time.hours)
							dateB.setMinutes(objectB.help.time.minutes)
							dateB.setSeconds(objectB.help.time.seconds)
							if (dateA < dateB) {
								return -1
							}
						}
						else if (objectA.help) return -1
					}))
				}

				//sort by poll
				if (sort.polls == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]
						if (objectA.pollRes.textRes && objectB.pollRes.textRes) {
							return objectA.pollRes.textRes.localeCompare(objectB.pollRes.textRes)
						} else if (objectA.pollRes.textRes) return -1
						else if (objectB.pollRes.textRes) return 1
						if (objectA.pollRes.buttonRes && objectB.pollRes.buttonRes) {
							return objectA.pollRes.buttonRes.localeCompare(objectB.pollRes.buttonRes)
						} else if (objectA.pollRes.buttonRes) return -1
						else if (objectB.pollRes.buttonRes) return 1
					}))
				} else if (sort.polls == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((entireA, entireB) => {
						objectA = entireA[1]
						objectB = entireB[1]
						if (objectA.pollRes.textRes && objectB.pollRes.textRes) {
							return objectB.pollRes.textRes.localeCompare(objectA.pollRes.textRes)
						} else if (objectA.pollRes.textRes) return 1
						else if (objectB.pollRes.textRes) return -1
						if (objectA.pollRes.buttonRes && objectB.pollRes.buttonRes) {
							return objectB.pollRes.buttonRes.localeCompare(objectA.pollRes.buttonRes)
						} else if (objectA.pollRes.buttonRes) return 1
						else if (objectB.pollRes.buttonRes) return -1
					}))
				}

				//sort by permissions
				if (sort.permissions == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => b[1].permissions - a[1].permissions))
				} else if (sort.permissions == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => a[1].permissions - b[1].permissions))
				}

				for (const student of Object.keys(newRoom.students)) {
					usersDiv.appendChild(buildStudent(newRoom, student))
				}
			}

			// sets filters
			for (let filterElement of document.getElementsByClassName('filter')) {
				filterElement.onclick = () => {
					filter[filterElement.id] += 1
					if (filter[filterElement.id] > 2) {
						filter[filterElement.id] = 0
					}
					if (filter[filterElement.id] == 0) filterElement.classList.remove('pressed')
					else filterElement.classList.add('pressed')
					filterElement.innerText = FilterState[filterElement.id][filter[filterElement.id]]
					filterSortChange()
				}
			}

			// sets sorts
			for (let sortElement of document.getElementsByClassName('sort')) {
				sortElement.onclick = () => {
					for (let sortType of Object.keys(sort)) {
						if (sortType != sortElement.id) {
							sort[sortType] = 0
							let otherSortElements = document.querySelector('.sort#' + sortType)
							if (otherSortElements) {
								otherSortElements.classList.remove('pressed')
								otherSortElements.innerText = SortState[sortType][sort[sortType]]
							}
						}
					}
					sort[sortElement.id] += 1
					if (sortElement.id == 'helpTime' && sort[sortElement.id] > 1) {
						sort[sortElement.id] = 0
					}
					else if (sort[sortElement.id] > 2) {
						sort[sortElement.id] = 0
					}
					if (sort[sortElement.id] == 0) sortElement.classList.remove('pressed')
					else sortElement.classList.add('pressed')
					sortElement.innerText = SortState[sortElement.id][sort[sortElement.id]]
					filterSortChange()
				}
			}

			socket.emit('managerUpdate')
		</script>
		<%- include('../partials/footer_content') %>