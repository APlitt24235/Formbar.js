<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<!DOCTYPE html>
		<html lang="en">

			<head>
				<meta charset="UTF-8">
				<meta http-equiv="X-UA-Compatible" content="IE=edge">
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<script src="/js/tabs.js" defer></script>
			</head>

			<body">
				<%- include('../partials/formbar_header') %>
					<header id="quickMenu">
						<button id="usersMenu" class="quickButton tab pressed" data-tab-group="mainTabs">Users</button>
						<button id="settingsMenu" class="quickButton tab" data-tab-group="mainTabs">Settings</button>
					</header>

					<div id="usersMenu" class="tabContent default" data-tab-group="mainTabs">
						<!-- <div id="userFilterBoxes" class="options">
							<h2 class="headerText">Filter</h2>
						</div> -->
						<div id="userSortBoxes" class="options">
							<h2 class="headerText">Sort</h2>
							<button type="button" id="name" class="sort">Name</button>
							<button type="button" id="permissions" class="sort pressed">Permissions ðŸ¡‡</button>
						</div>
						<button id="deleteStudents" onclick="((event) => {socket.emit('deleteStudents')})()">
							Delete All Students
						</button>
						<div id="users">
						</div>
					</div>
					<div id="settingsMenu" class="tabContent" data-tab-group="mainTabs">
						<div class="options">
							<button id="permissions" class="quickButton tab pressed"
								data-tab-group="settingsTabs">Permissions</button>
							<button id="plugins" class="quickButton tab" data-tab-group="settingsTabs">Plugins</button>
						</div>
						<div id="permissions" class="tabContent default" data-tab-group="settingsTabs">
							<h2>Permissions</h2>
							<div id="permissionsList"></div>
						</div>
					</div>
					<!-- <button onclick="socket.emit('sharePollToClass', 5 , 'npm5')">click me</button> -->
					<%- include('../partials/body_content') %>
						</body>

		</html>
		<script>
			let currentUser = JSON.parse('<%- JSON.stringify(currentUser) %>')
			let userCustomPolls = []
			let classroomCustomPolls = []
			let publicCustomPolls = []
			let customPolls = []
			let editingPollId = null
			let currentSharePollId = null
			let currentSharePollType = null

			const FilterState = {
			}

			const SortState = {
				name: [
					'Name',
					'Name ðŸ¡‡',
					'Name ðŸ¡…'
				],
				permissions: [
					'Permissions',
					'Permissions ðŸ¡‡',
					'Permissions ðŸ¡…'
				]
			}

			// 0 = off
			// 1 = only
			// 2 = except
			let filter = {
			}
			// 0 = off
			// 1 = descending
			// 2 = ascending
			let sort = {
				name: 0,
				permissions: 1
			}

			let letterString = "abcdefghijklmnopqrstuvwxyz"
			let generatedColors = []
			let pollResponses = []
			let colorPickers = []

			var usersDiv = document.getElementById('users')
			var resNumber = document.getElementById('resNumber')
			var resTextBox = document.getElementById('resTextBox')
			var endPoll = document.getElementById('endPoll')
			var clearPoll = document.getElementById('clearPoll')
			var startPollForm = document.getElementById('startPollForm')
			var pollPrompt = document.getElementById('pollBox')
			var pollFilter = document.getElementById('pollFilter')
			var missingPollFilter = document.getElementById('missingPollFilter')
			var lettFilter = document.getElementById('lettFilter')
			var textFilter = document.getElementById('textFilter')
			var permSort = document.getElementById('permSort')
			var permSortLabel = document.getElementById('permSortLabel')
			var helpFilter = document.getElementById('helpFilter')
			var responsesDiv = document.getElementById('responses')
			let resetAnswerNamesButton = document.getElementById('resetAnswerNames')
			let resetColorsButton = document.getElementById('resetColors')
			let settingsDiv = document.querySelector('.tabContent#settingsMenu')
			var pluginsDiv = document.querySelector('.tabContent#plugins')
			var previousPolls = document.getElementById('previousPolls')
			var previousPollButtons = document.getElementById('previousPollButtons')
			var toPollsButton = document.getElementById('toPolls')
			var toPollHistoryButton = document.getElementById('toPollHistory')
			let blindCheck = document.getElementById('blind')
			var classCode = document.getElementById('classCode')
			var menuUsers = document.getElementById('menuUsers')
			var menuPolls = document.getElementById('menuPolls')
			var mainPolls = document.getElementById('menuPolls')
			var menuLesson = document.getElementById('menuLesson')
			var menuPlugins = document.getElementById('menuPlugins')
			let unloadPollButton = document.getElementById('unload-poll')
			let savePollButton = document.getElementById('save-poll')
			let deletePollButton = document.getElementById('delete-poll')
			let sharePollDialog = document.getElementById('sharePollDialog')
			let sharePollUserInput = document.getElementById('sharePollUserInput')
			let sharePollClassInput = document.getElementById('sharePollClassInput')
			let permissionsDiv = document.querySelector('#permissionsList')
			let usersTabButton = document.querySelector('.tab#userMenu')
			let bannedTabButton = document.querySelector('.tab#bannedMenu')
			let pollsTabButton = document.querySelector('.tab#pollsMenu')
			let settingsTabButton = document.querySelector('.tab#settingsMenu')
			let permissionsTabButton = document.querySelector('.tab#permissions')
			let pluginsTabButton = document.querySelector('.tab#plugins')

			function camelCaseToNormal(str) {
				let result = str.replace(/([A-Z])/g, " $1")
				result = result.charAt(0).toUpperCase() + result.slice(1)
				return result
			}

			// makes student elements
			function buildStudent(room, student) {
				var newStudent = document.createElement("div")
				newStudent.classList.add("student")
				let studentElement = document.createElement("p")
				studentElement.innerText += student
				newStudent.appendChild(studentElement)
				let studentData = room.students[student]
				if (studentData.permissions < currentUser.permissions) {
					let permissionSwitch = document.createElement("select")
					permissionSwitch.setAttribute("name", "permSwitch")
					permissionSwitch.setAttribute("class", "permSwitch")
					permissionSwitch.setAttribute("data-userid", student)
					permissionSwitch.onchange = (event) => {
						socket.emit('permChange', event.target.dataset.userid, event.target.value)
					}
					if (studentData.permissions == 4) {
						let teacherOption = document.createElement("option")
						teacherOption.setAttribute("value", 4)
						teacherOption.setAttribute("selected", true)
						teacherOption.innerText = "Teacher"
						permissionSwitch.add(teacherOption)
						let modOption = document.createElement("option")
						modOption.setAttribute("value", 3)
						modOption.innerText = "Mod"
						permissionSwitch.add(modOption)
						let studentOption = document.createElement("option")
						studentOption.setAttribute("value", 2)
						studentOption.innerText = "Student"
						permissionSwitch.add(studentOption)
						let guestOption = document.createElement("option")
						guestOption.setAttribute("value", 1)
						guestOption.innerText = "Guest"
						permissionSwitch.add(guestOption)
					} else if (studentData.permissions == 3) {
						let teacherOption = document.createElement("option")
						teacherOption.setAttribute("value", 4)
						teacherOption.innerText = "Teacher"
						permissionSwitch.add(teacherOption)
						let modOption = document.createElement("option")
						modOption.setAttribute("value", 3)
						modOption.setAttribute("selected", true)
						modOption.innerText = "Mod"
						permissionSwitch.add(modOption)
						let studentOption = document.createElement("option")
						studentOption.setAttribute("value", 2)
						studentOption.innerText = "Student"
						permissionSwitch.add(studentOption)
						let guestOption = document.createElement("option")
						guestOption.setAttribute("value", 1)
						guestOption.innerText = "Guest"
						permissionSwitch.add(guestOption)
					} else if (studentData.permissions == 2) {
						let teacherOption = document.createElement("option")
						teacherOption.setAttribute("value", 4)
						teacherOption.innerText = "Teacher"
						permissionSwitch.add(teacherOption)
						let modOption = document.createElement("option")
						modOption.setAttribute("value", 3)
						modOption.innerText = "Mod"
						permissionSwitch.add(modOption)
						let studentOption = document.createElement("option")
						studentOption.setAttribute("value", 2)
						studentOption.setAttribute("selected", true)
						studentOption.innerText = "Student"
						permissionSwitch.add(studentOption)
						let guestOption = document.createElement("option")
						guestOption.setAttribute("value", 1)
						guestOption.innerText = "Guest"
						permissionSwitch.add(guestOption)
					} else if (studentData.permissions == 1) {
						let teacherOption = document.createElement("option")
						teacherOption.setAttribute("value", 4)
						teacherOption.innerText = "Teacher"
						permissionSwitch.add(teacherOption)
						let modOption = document.createElement("option")
						modOption.setAttribute("value", 3)
						modOption.innerText = "Mod"
						permissionSwitch.add(modOption)
						let studentOption = document.createElement("option")
						studentOption.setAttribute("value", 2)
						studentOption.innerText = "Student"
						permissionSwitch.add(studentOption)
						let guestOption = document.createElement("option")
						guestOption.setAttribute("value", 1)
						guestOption.setAttribute("selected", true)
						guestOption.innerText = "Guest"
						permissionSwitch.add(guestOption)
					}
					newStudent.appendChild(permissionSwitch)
					newStudent.append(" ")
					let banStudentButton = document.createElement("button")
					banStudentButton.className = 'banStudent quickButton'
					banStudentButton.setAttribute("data-user", student)
					banStudentButton.innerText = "Ban User"
					banStudentButton.onclick = (event) => {
						socket.emit('banStudent', student)
					}
					newStudent.appendChild(banStudentButton)
					let deleteStudentButton = document.createElement("button")
					deleteStudentButton.className = 'deleteStudent quickButton'
					deleteStudentButton.setAttribute("data-userid", student)
					deleteStudentButton.onclick = (event) => {
						socket.emit('deleteStudent', student)
					}
					deleteStudentButton.innerText = "Delete User"
					newStudent.appendChild(deleteStudentButton)
				}
				return newStudent
			}

			// filters and sorts students
			function filterSortChange() {
				usersDiv.innerHTML = ''
				let newStudent = ''
				let breakButton = document.getElementById("break")

				//filter by break
				if (filter.break == 1) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (!student.break) {
							delete newRoom.students[username]
						}
					}
				} else if (filter.break == 2) {
					for (let [username, student] of Object.entries(newRoom.students)) {
						if (student.break) {
							delete newRoom.students[username]
						}
					}
				}

				//sort by name
				if (sort.name == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort())
				} else if (sort.name == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort().reverse())
				}

				//sort by permissions
				if (sort.permissions == 1) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => b[1].permissions - a[1].permissions))
				} else if (sort.permissions == 2) {
					newRoom.students = Object.fromEntries(Object.entries(newRoom.students).sort((a, b) => a[1].permissions - b[1].permissions))
				}

				for (const student of Object.keys(newRoom.students)) {
					usersDiv.appendChild(buildStudent(newRoom, student))
				}
			}

			// sets filters
			for (let filterElement of document.getElementsByClassName('filter')) {
				filterElement.onclick = () => {
					filter[filterElement.id] += 1
					if (filter[filterElement.id] > 2) {
						filter[filterElement.id] = 0
					}
					if (filter[filterElement.id] == 0) filterElement.classList.remove('pressed')
					else filterElement.classList.add('pressed')
					filterElement.innerText = FilterState[filterElement.id][filter[filterElement.id]]
					filterSortChange()
				}
			}

			// sets sorts
			for (let sortElement of document.getElementsByClassName('sort')) {
				sortElement.onclick = () => {
					for (let sortType of Object.keys(sort)) {
						if (sortType != sortElement.id) {
							sort[sortType] = 0
							let otherSortElements = document.querySelector('.sort#' + sortType)
							if (otherSortElements) {
								otherSortElements.classList.remove('pressed')
								otherSortElements.innerText = SortState[sortType][sort[sortType]]
							}
						}
					}
					sort[sortElement.id] += 1
					if (sortElement.id == 'helpTime' && sort[sortElement.id] > 1) {
						sort[sortElement.id] = 0
					}
					else if (sort[sortElement.id] > 2) {
						sort[sortElement.id] = 0
					}
					if (sort[sortElement.id] == 0) sortElement.classList.remove('pressed')
					else sortElement.classList.add('pressed')
					sortElement.innerText = SortState[sortElement.id][sort[sortElement.id]]
					filterSortChange()
				}
			}

			socket.emit('managerUpdate')
		</script>
		<%- include('../partials/footer_content') %>