<%- include('../partials/header_content') %>
    <html>
    <style>
        body {
            user-select: none;
            background: var(--bg-dark-blue);
        }

        #virtualBar {
            width: calc(100% - 32px);
        }

        #text {
            width: 10ch;
            padding: 0 4px;
            border: 1px white;
            border-style: solid solid none;
            background: black;
            font: 32px monospace;
            text-transform: uppercase;
            overflow: hidden;
        }

        #pixBox {
            width: 100%;
            height: 64px;
            box-sizing: border-box;
            border: 1px solid white;
            display: flex;
            justify-content: space-around;
            user-select: none;
        }
    </style>
    <div class="container"></div>
    <canvas id='virtualbar' style="height:900px; width:969px"></canvas>

    </html>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
        integrity="sha512-ElRFoEQdI5Ht6kZvyzXhYG9NqjtkmlkfYk0wr6wHxU9JEHakS7UJZNeml5ALk+8IKlU6jDgMabC3vkumRokgJA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        var socket = io();
        var mychart = document.getElementById('virtualbar').getContext("2d");
        var doughnutChart = new Chart(mychart, {
            type: 'doughnut',
            data: {
                labels: [],
                datasets: [{
                    backgroundColor: [],
                    data: []
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            font: {
                                size: 15
                            },
                            color: 'black'
                        }

                    }
                }
            }
        });

        let pixRes;

        // Update the virtual bar
        // Creates new labels and colors, plus imports all new data to the table
        function update(data) {


            var labelsArray = [];
            var pollArray = [];

            let studResponses = {};
            // Loops through object to get each label of the possible answers
            // Also, create a new variable for each possible answer
            for (const answer of Object.keys(data.posPollResObj)) {
                labelsArray.push(data.posPollResObj[answer])
                studResponses[answer] = 0;
            }

            // Loops through all possible answers and generates a new color variant for each answer
            // All possible answers should have a different color
            for (let i = 0; i < Object.keys(data.posPollResObj).length; i++) {
                let color = ''
                switch (i%4) {
                    case 0:
                        color = `#ff${i}${i}${i}${i}`
                        break
                    case 1:
                        color = `#${i}${i}ff${i}${i}`
                        break
                    case 2:
                        color = `#${i}${i}${i}${i}ff`
                        break
                    case 3:
                        color = `#ffff${i}${i}`
                        break
                }
                doughnutChart.data.datasets[0].backgroundColor.push(color)
            }
            // Loops through all student answers and adds them to a total tally
            // Student response corresponds with a property name in studResponses 
            for (const student of Object.keys(data.students)) {
                studResponses[data.students[student].pollRes]++;
            }
            //
            for (const responses of Object.keys(studResponses)) {
                pollArray.push(studResponses[responses]);
            }

            doughnutChart.data.labels = labelsArray;
            doughnutChart.data.datasets[0].data = pollArray;
            doughnutChart.update();
        }

        // Calls for data
        socket.emit('vbData')
        // Gets data from server and send it the function
        socket.on('vbData', function (data) {
            data = JSON.parse(data)
            update(data);
        })

    </script>

    <%- include('../partials/footer_content') %>