<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<!DOCTYPE html>
		<html lang="en">

		<head>
			<meta charset="UTF-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<script src="/js/iro.js"></script>
			<script src="/js/floating-ui-core.js"></script>
			<script src="/js/floating-ui-dom.js"></script>

			<script src="/js/isObjectEqual.js"></script>
		</head>

		<body onload="load(<%-pollStatus%>)">
			<%- include('../partials/formbar_header') %>
				<header id="quickMenu">
					<button id="usersMenu" class="quickButton tab pressed" data-tab-group="mainTabs">Users</button>
					<button id="bannedMenu" class="quickButton tab" data-tab-group="mainTabs">Banned Users</button>
					<button id="pollsMenu" class="quickButton tab" data-tab-group="mainTabs">Poll </button>
					<!-- <button id="lessonMenu" class="quickButton tab" data-tab-group="mainTabs">Make a Lesson</button> -->
					<button id="settingsMenu" class="quickButton tab" data-tab-group="mainTabs">Settings</button>
				</header>

				<p id="classCode">Class Code:</p>
				<div id="usersMenu" class="tabContent default" data-tab-group="mainTabs">
					<div id="userFilterBoxes" class="options">
						<h2 class="headerText">Filter</h2>
						<button type="button" id="help" class="filter">Help tickets</button>
						<button type="button" id="break" class="filter">Break</button>
						<button type="button" id="polls" class="filter">Polls</button>
					</div>
					<div id="userSortBoxes" class="options">
						<h2 class="headerText">Sort</h2>
						<button type="button" id="name" class="sort">Name</button>
						<button type="button" id="polls" class="sort">Polls</button>
						<button type="button" id="helpTime" class="sort">Help Time</button>
						<button type="button" id="permissions" class="sort pressed">Permissions 🡇</button>
					</div>
					<button id="kickUsers" onclick="((event) => {socket.emit('classKickStudents')})()">
						Kick All Students
					</button>
					<button id="endClass" onclick="((event) => {socket.emit('endClass')})()">
						End Class
					</button>
					<div id="users">
					</div>
				</div>
				<div id="bannedMenu" class="tabContent" data-tab-group="mainTabs"></div>
				<div id="pollsMenu" class="tabContent" data-tab-group="mainTabs">
					<div id="pollOptions" class="options">
						<h2 class="headerText">Custom Polls</h2>
						<button id="publicPolls" class="quickButton tab unselectable" data-tab-group="polls">Public
							Polls</button>
						<button id="classPolls" class="quickButton tab unselectable" data-tab-group="polls">Class
							Polls</button>
						<button id="userPolls" class="quickButton tab unselectable" data-tab-group="polls">Your
							Polls</button>
					</div>
					<div id="mainPolls" class="tabContent default" data-tab-group="polls">
						<div id="pollActions" class="options">
							<button id="unload-poll" style="display: none;" onclick="unloadPoll()">Unload Poll</button>
							<button id="save-poll" style="display: none;" onclick="savePoll()">Save Poll</button>
							<button id="save-poll-as" onclick="savePollAs()">Save Poll As</button>
							<button id="delete-poll" style="display: none;" onclick="deletePoll()">Delete Poll</button>
						</div>
						<h2 class="headerText" style="margin-top: 0;">Start/Clear Poll</h2>
						<div id="startPollForm">
							<label for="resNumber">How many possible responses?</label>
							<input type="number" id="resNumber" min="1" max="26" step="1" value="1"
								onchange="responseAmountChange()">
							<br>
							<label for="resTextBox">Would like to accept text responses?</label>
							<input type="checkbox" id="resTextBox" onclick="resTextChange()">
							<br>
							<label for="pollBox">Prompt for the poll?</label>
							<input type="text" id="pollBox" placeholder="Prompt (optional)">
							<br>
							<label for="changeNames">Customize the answer options?</label>
							<input type="button" id="changeNames" value="Edit Responses" onclick="showResponses()"
								class="quickButton">
							<br>

							<label for="changeNames">Specify Tags?</label>
							<input type="button" id="changeNames" value="Tags" onclick="selectTags.showModal()"
								class="quickButton">
							<br>

							<button id="resetAnswerNames" class="quickButton">Reset Names</button>
							<button id="resetColors" class="quickButton">Reset Colors</button>
							<div id="responses"></div>
							<br>
							<label for="blind">Blind poll? (Responses won't be visible until everyone has
								answered)</label>
							<input type="checkbox" id="blind">
							<br>
							<button id="startPoll" onclick="startPoll()">Start Poll</button>
							<br>
						</div>
						<button id="endPoll" onclick="endPollFunc()" hidden class="quickButton">End Poll</button>
						<br>
						<button id="clearPoll" onclick="clearPollFunc()" hidden class="quickButton">Clear Poll</button>
						<br>
						<button type="button" onclick="displayPreviousPolls()" class="quickButton">View Previous
							Polls</button>
					</div>
					<div id="publicPolls" class="customPolls tabContent" data-tab-group="polls">
					</div>
					<div id="classPolls" class="customPolls tabContent" data-tab-group="polls">
					</div>
					<div id="userPolls" class="customPolls tabContent" data-tab-group="polls">
					</div>
					<div id="previousPolls" class="tabContent" data-tab-group="polls">
						<button id="toPolls" type="button" onclick="changeTab('mainPolls', 'polls')">Return to
							polls</button>
						<button id="toPollHistory" type="button" onclick="displayPoll()">Return To Selection</button>
						<div id="previousPollButtons"></div>
					</div>
				</div>
				<div id="lessonMenu" class="tabContent" data-tab-group="mainTabs">
					<form method="post" enctype="multipart/form-data">
						<input name="spreadsheet" type="file">
						<input type="submit" class="quickButton">
					</form>
					<button type="button" id="nextStep">Next Step</button><br>
					<br>
					<form>
						<label class="form-control" id="pollControl" for="modeP">
							<input type="radio" name="mode" id="modeP" onchange="modeChange()" value="poll">
							Poll Mode
						</label>
						<label class="form-control" id="pollControl" for="modeL">
							<input type="radio" name="mode" id="modeL" onchange="modeChange()" value="lesson">
							Lesson Mode
						</label>
						<label class="form-control" id="pollControl" for="modeQ">
							<input type="radio" name="mode" id="modeQ" onchange="modeChange()" value="quiz">
							Quiz Mode
						</label>
						<label class="form-control" id="pollControl" for="modePT">
							<input type="radio" name="mode" id="modePT" onchange="modeChange()" value="playtime">
							Playtime Mode
						</label>
					</form>
				</div>
				<div id="settingsMenu" class="tabContent" data-tab-group="mainTabs">
					<div class="options">
						<button id="permissions" class="quickButton tab pressed"
							data-tab-group="settingsTabs">Permissions</button>
						<button id="plugins" class="quickButton tab" data-tab-group="settingsTabs">Plugins</button>
					</div>
					<div id="permissions" class="tabContent default" data-tab-group="settingsTabs">
						<h2>Permissions</h2>
						<div id="permissionsList"></div>
					</div>
					<div id="plugins" class="tabContent" data-tab-group="settingsTabs">
					</div>
				</div>
				<dialog id="sharePollDialog">
					<button
						onclick="(()=>{currentSharePollId = null; document.getElementById('sharePollDialog').close()})()">Close</button>
					<p>
						<label for="share">Share to User</label>
						<input type="text" name="share" id="sharePollUserInput" pattern="[a-z0-9]+"
							placeholder="Username" onkeypress="if(event.key == 'Enter') sharePoll('user')">
					</p>
					<div id="userPollShares"></div>
					<p>
						<label for="share">Share to Class</label>
						<input type="text" name="share" id="sharePollClassInput" pattern="[a-z0-9]+"
							placeholder="Class Code" onkeypress="if(event.key == 'Enter') sharePoll('class')">
					</p>
					<div id="classPollShares"></div>
				</dialog>
				<!-- <button onclick="socket.emit('sharePollToClass', 5 , 'npm5')">click me</button> -->
				<%- include('../partials/body_content') %>
		</body>

		</html>
		<script src="/js/tabs.js"></script>
		<script>
			let userCustomPolls = []
			let classroomCustomPolls = []
			let publicCustomPolls = []
			let customPolls = []
			let editingPollId = null
			let currentSharePollId = null
			let currentSharePollType = null
			let allRoom = {}

			const FilterState = {
				help: [
					'Help tickets',
					'Help ticket in',
					'No help ticket'
				],
				break: [
					'Break',
					'Taking a break',
					'Not taking a break'
				],
				polls: [
					'Polls',
					'Responded to poll',
					'Did not respond to poll',
				]
			}

			const SortState = {
				name: [
					'Name',
					'Name 🡇',
					'Name 🡅'
				],
				polls: [
					'Polls',
					'Polls 🡇',
					'Polls 🡅'
				],
				helpTime: [
					'Help time',
					'Sorting by Help time',
				],
				permissions: [
					'Permissions',
					'Permissions 🡇',
					'Permissions 🡅'
				]
			}

			// 0 = off
			// 1 = only
			// 2 = except
			let filter = {
				help: 0,
				break: 0,
				polls: 0
			}
			// 0 = off
			// 1 = descending
			// 2 = ascending
			let sort = {
				name: 0,
				polls: 0,
				helpTime: 0,
				permissions: 1
			}

			let letterString = 'abcdefghijklmnopqrstuvwxyz'
			let generatedColors = []
			let pollResponses = []
			let colorPickers = []
			var usersDiv = document.getElementById('users')
			var resNumber = document.getElementById('resNumber')
			var resTextBox = document.getElementById('resTextBox')
			var endPoll = document.getElementById('endPoll')
			var clearPoll = document.getElementById('clearPoll')
			var startPollForm = document.getElementById('startPollForm')
			var pollPrompt = document.getElementById('pollBox')
			var permSort = document.getElementById('permSort')
			var responsesDiv = document.getElementById('responses')
			let resetAnswerNamesButton = document.getElementById('resetAnswerNames')
			let resetColorsButton = document.getElementById('resetColors')
			var pluginsDiv = document.querySelector('.tabContent#plugins')
			var previousPolls = document.getElementById('previousPolls')
			var previousPollButtons = document.getElementById('previousPollButtons')
			var toPollsButton = document.getElementById('toPolls')
			var toPollHistoryButton = document.getElementById('toPollHistory')
			let blindCheck = document.getElementById('blind')
			var classCode = document.getElementById('classCode')
			var mainPolls = document.getElementById('menuPolls')
			let unloadPollButton = document.getElementById('unload-poll')
			let savePollButton = document.getElementById('save-poll')
			let deletePollButton = document.getElementById('delete-poll')
			let sharePollDialog = document.getElementById('sharePollDialog')
			let sharePollUserInput = document.getElementById('sharePollUserInput')
			let sharePollClassInput = document.getElementById('sharePollClassInput')
			let permissionsDiv = document.querySelector('#permissionsList')
			let bannedTabButton = document.querySelector('.tab#bannedMenu')
			let pollsTabButton = document.querySelector('.tab#pollsMenu')
			let settingsTabButton = document.querySelector('.tab#settingsMenu')
			let permissionsTabButton = document.querySelector('.tab#permissions')


			// Function runs on page load
			// Checks if poll is active or not and displays correct output
			function load(pollStatus) {
				if (pollStatus) {
					startPollForm.style.display = 'none'
					clearPoll.style.display = 'block'
					endPoll.style.display = 'block'
				} else {
					startPollForm.style.display = 'block'
					clearPoll.style.display = 'none'
					endPoll.style.display = 'none'
				}
			}

			function HSLToHex(hue, saturation, lightness) {
				// Normalize lightness to range 0-1
				lightness /= 100;

				// Calculate chroma
				const chroma = saturation * Math.min(lightness, 1 - lightness) / 100;

				// Function to get color component
				function getColorComponent(colorIndex) {
					const colorPosition = (colorIndex + hue / 30) % 12;
					const colorValue = lightness - chroma * Math.max(Math.min(colorPosition - 3, 9 - colorPosition, 1), -1);

					// Return color component in hexadecimal format
					return Math.round(255 * colorValue).toString(16).padStart(2, '0');
				};

				// Return the hex color
				return `#${getColorComponent(0)}${getColorComponent(8)}${getColorComponent(4)}`;
			}

			function hexToRGB(hexColor) {
				hexColor = hexColor.substring(1)
				let red = parseInt(hexColor.substring(0, 2), 16);
				let green = parseInt(hexColor.substring(2, 4), 16);
				let blue = parseInt(hexColor.substring(4, 6), 16);
				return { red, green, blue };
			}

			function rgbToHSV(red, green, blue) {
				red = red / 255, green = green / 255, blue = blue / 255;
				let maxColor = Math.max(red, green, blue)
				let minColor = Math.min(red, green, blue)
				let hue, saturation, value = maxColor
				let colorDifference = maxColor - minColor
				saturation = maxColor === 0 ? 0 : colorDifference / maxColor
				if (maxColor === minColor) {
					hue = 0
				} else {
					switch (maxColor) {
						case red: {
							hue = (green - blue) / colorDifference + (green < blue ? 6 : 0)
							break
						}
						case green: {
							hue = (blue - red) / colorDifference + 2
							break
						}
						case blue: {
							hue = (red - green) / colorDifference + 4
							break
						}
					}
					hue /= 6
				}
				return { hue: hue * 360, saturation: saturation * 100, value: value * 100 }
			}

			function hexToHSV(hexColor) {
				let { red, green, blue } = hexToRGB(hexColor)
				return rgbToHSV(red, green, blue)
			}

			function generateColors(amount) {
				// Initialize colors array
				let colors = [];

				// Initialize hue
				let hue = 0

				// Generate colors
				for (let i = 0; i < amount; i++) {
					// Add color to the colors array
					colors.push(HSLToHex(hue, 100, 50));

					// Increment hue
					hue += 360 / amount
				}

				// Return the colors array
				return colors;
			}

			function camelCaseToNormal(str) {
				let result = str.replace(/([A-Z])/g, ' $1')
				result = result.charAt(0).toUpperCase() + result.slice(1)
				return result
			}

			//displays the previous polls page
			function displayPreviousPolls() {
				toPollHistoryButton.style.display = 'none'
				changeTab('previousPolls', 'polls')
			}

			//makes the previous polls page
			function buildPreviousPolls(data) {
				previousPollButtons.innerHTML = ''
				let br = document.createElement('br')

				for (let pollIndex = data.length - 1; pollIndex >= 0; pollIndex--) {
					let pollButton = document.createElement('button')
					pollButton.type = 'button'
					pollButton.className = 'quickButton'
					pollButton.textContent = data[pollIndex].date + ' ' + data[pollIndex].data.prompt
					pollButton.onclick = (event) => {
						event.preventDefault()
						displayPoll(data[pollIndex].id)
					}
					previousPollButtons.appendChild(pollButton)

					previousPollButtons.appendChild(br.cloneNode(true))


					let previousPollDiv = document.createElement('div')
					previousPollDiv.className = 'previousPoll'
					previousPollDiv.id = data[pollIndex].id
					previousPollDiv.style.display = 'none'

					let previousPollPrompt = document.createElement('p')
					previousPollPrompt.textContent = `Prompt: ${data[pollIndex].data.prompt}`
					previousPollDiv.appendChild(previousPollPrompt)

					for (let userIndex = 0; userIndex < data[pollIndex].data.names.length; userIndex++) {
						let username = document.createElement('p')
						username.textContent = `Name: ${data[pollIndex].data.names[userIndex]}`
						previousPollDiv.appendChild(username)

						let letter = document.createElement('p')
						letter.textContent = `Letter: ${data[pollIndex].data.letter[userIndex]}`
						previousPollDiv.appendChild(letter)

						let text = document.createElement('p')
						text.textContent = `Text: ${data[pollIndex].data.text[userIndex]}`
						previousPollDiv.appendChild(text)
					}
					previousPolls.appendChild(previousPollDiv)
				}
			}

			function displayPoll(id) {
				if (id) {
					let previousPollDivs = document.getElementsByClassName('previousPoll')

					previousPollButtons.style.display = 'none'
					toPollsButton.style.display = 'none'
					toPollHistoryButton.style.display = ''

					for (let pollDiv of previousPollDivs) {
						if (pollDiv.id == id)
							pollDiv.style.display = 'block'
						else
							pollDiv.style.display = 'none'
					}
				} else {
					let previousPollDivs = document.getElementsByClassName('previousPoll')
					previousPollButtons.style.display = 'block'
					toPollsButton.style.display = ''
					toPollHistoryButton.style.display = 'none'

					for (let pollDiv of previousPollDivs) {
						pollDiv.style.display = 'none'
					}
				}
			}

			function saveColor(index) {
				let colorPickerButton = document.getElementsByClassName('colorPickerButton')[index]
				let oldColor = document.getElementsByClassName('oldColor')[index]

				pollResponses[index].color = colorPickers[index].color.hexString
				colorPickerButton.style.backgroundColor = colorPickers[index].color.hexString;
				oldColor.style.backgroundColor = colorPickers[index].color.hexString;
			}

			function resTextChange() {
				if (resTextBox.checked) {
					resNumber.min = 0
				}
				else {
					resNumber.min = 1
					if (resNumber.value < 1) resNumber.value = 1
				}
			}

			function responseAmountChange() {
				if (resTextBox.checked) {
					if (resNumber.value < 0) resNumber.value = 0
				}
				else {
					if (resNumber.value < 1) resNumber.value = 1
				}
				if (resNumber.value > 26) resNumber.value = 26

				generatedColors = generateColors(resNumber.value)
				if (pollResponses.length > resNumber.value) {

					let responseDivs = document.getElementsByClassName('response')
					for (let i = resNumber.value; i < pollResponses.length; i++) {
						document.getElementById(`response${i}`).remove()
					}

					pollResponses.splice(resNumber.value)
					colorPickers.splice(resNumber.value)
				}

				for (let i = pollResponses.length; i < resNumber.value; i++) {
					pollResponses.push({
						answer: '',
						defaultAnswer: letterString[i],
						color: '',
						defaultColor: generateColors[i],
						weight: 1,
						defaultWeight: 1
					})

					let responseDiv = document.createElement('div')
					responseDiv.className = 'response'
					responseDiv.id = `response${i}`

					let colorPickerButton = document.createElement('button')
					colorPickerButton.className = 'colorPickerButton'
					colorPickerButton.id = i
					colorPickerButton.onclick = (event) => {
						event.preventDefault()
						let id = Number(event.target.id)
						let colorPickers = document.getElementsByClassName('colorPicker')

						for (let colorPickerIndex = 0; colorPickerIndex < colorPickers.length; colorPickerIndex++) {
							if (colorPickerIndex == id) continue

							colorPickers[colorPickerIndex].style.display = 'none'
						}

						let colorPicker = colorPickers[id]
						if (colorPicker.style.display == 'grid') {
							colorPicker.style.display = 'none'
						}
						else {
							colorPicker.style.display = 'grid'
						}
					}
					responseDiv.appendChild(colorPickerButton)

					let colorPickerDiv = document.createElement('div')
					colorPickerDiv.className = 'colorPicker'

					let buttonsDiv = document.createElement('div')
					buttonsDiv.className = 'buttonsDiv'

					let saveColorButton = document.createElement('button')
					saveColorButton.className = 'quickButton'
					saveColorButton.textContent = 'Save Color'
					saveColorButton.onclick = () => {
						saveColor(i)
					}
					buttonsDiv.appendChild(saveColorButton)

					let resetColor = document.createElement('button')
					resetColor.className = 'quickButton'
					resetColor.textContent = 'Reset Color'
					resetColor.onclick = (event) => {
						event.preventDefault()
						let responseDiv = document.getElementsByClassName('response')[i]
						let colorPickerButton = responseDiv.getElementsByClassName('colorPickerButton')[0]
						let oldColor = responseDiv.getElementsByClassName('oldColor')[0]

						pollResponses[i].color = ''
						colorPickers[i].color.set(generatedColors[i])
						colorPickerButton.style.backgroundColor = generatedColors[i]
						oldColor.style.backgroundColor = generatedColors[i]
					}
					buttonsDiv.appendChild(resetColor)

					colorPickerDiv.appendChild(buttonsDiv)

					let colorsDiv = document.createElement('div')
					colorsDiv.className = 'colorsDiv'

					let oldColor = document.createElement('div')
					oldColor.className = 'oldColor'
					colorsDiv.appendChild(oldColor)

					let newColor = document.createElement('div')
					newColor.className = 'newColor'
					colorsDiv.appendChild(newColor)

					colorPickerDiv.appendChild(colorsDiv)

					let hexLabel = document.createElement('label')
					hexLabel.className = 'hexLabel'
					hexLabel.textContent = 'Hex '
					let hexInput = document.createElement('input')
					hexInput.className = 'hexInput'
					hexInput.type = 'text'
					hexInput.pattern = '[0-9A-Fa-f]{3,6}'
					hexInput.onchange = (event) => {
						event.preventDefault()
						colorPickers[i].color.set('#' + event.target.value)
					}
					hexLabel.appendChild(hexInput)

					colorPickerDiv.appendChild(hexLabel)

					responseDiv.appendChild(colorPickerDiv)

					let answerName = document.createElement('input')
					answerName.type = 'text'
					answerName.className = 'answerName'
					answerName.name = 'answerName'
					answerName.placeholder = `Answer ${String.fromCharCode(i + 97)} `
					answerName.value = ''
					answerName.onchange = (event) => {
						pollResponses[i].answer = event.target.value;
					}
					responseDiv.appendChild(answerName)

					responsesDiv.appendChild(responseDiv)

					FloatingUIDOM.autoUpdate(
						colorPickerButton,
						colorPickerDiv,
						() => {
							FloatingUIDOM.computePosition(colorPickerButton, colorPickerDiv, {
								placement: 'bottom',
								middleware: [FloatingUIDOM.offset(10), FloatingUIDOM.flip()]
							})
								.then(({ x, y }) => {
									Object.assign(colorPickerDiv.style, {
										left: `${x}px`,
										top: `${y}px`
									})
								})
						})

					colorPickers[i] = new iro.ColorPicker(colorPickerDiv, {
						width: 100,
						color: generatedColors[i],
						id: i,
						layoutDirection: 'horizontal',
						layout: [
							{
								component: iro.ui.Wheel,
							},
							{
								component: iro.ui.Slider,
								options: {
									sliderType: 'value'
								}
							}
						]
					});
					colorPickers[i].on(['color:init', 'color:change'], color => {
						let newColor = responseDiv.getElementsByClassName('newColor')[0]
						let hexInput = responseDiv.getElementsByClassName('hexInput')[0]

						newColor.style.backgroundColor = color.hexString
						hexInput.value = color.hexString.substring(1)
					})
				}

				let responseDivs = document.getElementsByClassName('response')
				for (let i = 0; i < pollResponses.length; i++) {
					let responseDiv = responseDivs[i]
					let colorPickerButton = responseDiv.getElementsByClassName('colorPickerButton')[0]
					let oldColor = responseDiv.getElementsByClassName('oldColor')[0]

					pollResponses[i].defaultColor = generatedColors[i]
					if (!pollResponses[i].color) {
						colorPickerButton.style.backgroundColor = generatedColors[i]
						oldColor.style.backgroundColor = generatedColors[i]
					}
					let hsv = hexToHSV(generatedColors[i])
					colorPickers[i].color.initialValue = {
						h: hsv.hue,
						s: hsv.saturation,
						v: hsv.value,
						a: 1,
					}
				}
			}
			responseAmountChange()

			function resetAnswerNames() {
				let answerNames = document.getElementsByName('answerName')
				for (let i = 0; i < pollResponses.length; i++) {
					pollResponses[i].answer = pollResponses[i].defaultAnswer
					answerNames[i].value = ''
				}
			}
			resetAnswerNamesButton.onclick = resetAnswerNames

			function resetColors() {
				for (let i = 0; i < pollResponses.length; i++) {
					let responseDiv = document.getElementsByClassName('response')[i]
					let colorPickerButton = responseDiv.getElementsByClassName('colorPickerButton')[0]
					let oldColor = responseDiv.getElementsByClassName('oldColor')[0]

					pollResponses[i].color = ''
					colorPickerButton.style.backgroundColor = generatedColors[i]
					oldColor.style.backgroundColor = generatedColors[i]
				}
			}
			resetColorsButton.onclick = resetColors

			function showResponses() {
				if (responsesDiv.style.display == 'grid')
					responsesDiv.style.display = 'none'
				else responsesDiv.style.display = 'grid'
			}

			function modeChange() {
				let modeP = document.getElementById('modeP')
				let modeL = document.getElementById('modeL')
				let modeQ = document.getElementById('modeQ')
				let modePT = document.getElementById('modePT')

				if (modeP.checked) {
					socket.emit('modechange', modeP.value)
				} else if (modeL.checked) {
					socket.emit('modechange', modeL.value)
				} else if (modeQ.checked) {
					socket.emit('modechange', modeQ.value)
				} else if (modePT.checked) {
					socket.emit('modechange', modePT.value)
				}
			}

			// Ends the poll and reloads the users page to stop any more submission
			function clearPollFunc() {
				socket.emit('clearPoll')
				startPollForm.style.display = 'block'
				clearPoll.style.display = 'none'
			}

			function endPollFunc() {
				socket.emit('endPoll')

			}
			// makes student elements

			function buildOption(value, text, selected = false) {
				let option = document.createElement('option')
				option.value = value
				option.selected = selected
				option.textContent = text
				return option
			}

			function buildStudent(room, studentData) {
				if (studentData.classPermissions < currentUser.classPermissions) {
					newStudent = document.createElement("details");
					newStudent.classList.add('quickButton');
				}
				else {
					newStudent = document.createElement("div");
					let studentElement = document.createElement("p");
					studentElement.innerText = studentData.username;
					newStudent.appendChild(studentElement);
				}
				newStudent.setAttribute('id', `student-${studentData.username}`);
				if (studentData.break == true) {
					let breakText = document.createElement('p')
					breakText.textContent += 'taking a break'
					newStudent.appendChild(breakText)
				}
				else if (studentData.break) {
					let breakDiv = document.createElement('div')
					breakDiv.setAttribute('id', 'break')
					let breakNeeded = document.createElement('p')
					breakNeeded.textContent = 'Needs a break'
					breakDiv.appendChild(breakNeeded)
					let breakReason = document.createElement('p')
					breakReason.textContent = `Reason: ${studentData.break} `
					breakDiv.appendChild(breakReason)
					let breakApprove = document.createElement('button')
					breakApprove.classList.add('quickButton')
					breakApprove.onclick = () => { approveBreak(true, studentData.username) }
					breakApprove.textContent = 'Approve'
					breakDiv.appendChild(breakApprove)
					let breakDeny = document.createElement('button')
					breakDeny.classList.add('quickButton')
					breakDeny.onclick = () => { approveBreak(false, studentData.username) }
					breakDeny.textContent = 'Deny'
					breakDiv.appendChild(breakDeny)
					newStudent.appendChild(breakDiv)
					let lineBreak = document.createElement('br')
					newStudent.appendChild(lineBreak)
				}
				if (studentData.help) {
					let help = document.createElement('p')
					help.setAttribute('id', 'help')
					help.textContent = 'sent help ticket'
					if (studentData.help.reason) {
						let helpReason = document.createElement('p')
						helpReason.textContent = `reason ${studentData.help.reason} `
						help.appendChild(helpReason)
					}
					let helpTimeDisplay = document.createElement('p')
					helpTimeDisplay.textContent = `at ${studentData.help.time.hours}:${studentData.help.time.minutes}:${studentData.help.time.seconds} `
					help.appendChild(helpTimeDisplay)
					let deleteTicketButton = document.createElement('button')
					deleteTicketButton.classList.add('quickButton')
					deleteTicketButton.dataset.studentName = studentData.username
					deleteTicketButton.onclick = (event) => {
						deleteTicket(event.target)
					}
					deleteTicketButton.textContent = 'Delete Ticket'
					help.appendChild(deleteTicketButton)
					newStudent.appendChild(help)
					let lineBreak = document.createElement('br')
					newStudent.appendChild(lineBreak)
				}
				if (studentData.pollTextRes) {
					let pollTextResponse = document.createElement('p')
					pollTextResponse.textContent = `Poll Text: ${studentData.pollRes.textRes} `
					newStudent.appendChild(pollTextResponse)
				}
				if (studentData.pollRes.buttonRes) {
					let pollResponse = document.createElement('p')
					pollResponse.textContent = `Poll: ${studentData.pollRes.buttonRes} `
					for (let eachResponse in room.poll.responses) {
						if (eachResponse == studentData.pollRes.buttonRes) {
							pollResponse.style.color = room.poll.responses[eachResponse].color
						}
					}
					newStudent.appendChild(pollResponse)
				}
				if (studentData.pollRes.textRes) {
					let textResponse = document.createElement('p')
					textResponse.textContent = `Text Response: ${studentData.pollRes.textRes}`
					newStudent.appendChild(textResponse)
				}
				if (studentData.classPermissions < currentUser.classPermissions) {
					let studentElement = document.createElement("summary");
					studentElement.innerText = studentData.username;
					let space = document.createElement('span')
					space.textContent = ' '
					studentElement.appendChild(space)
					for (let eachResponse in room.poll.responses) {
						if (eachResponse == studentData.pollRes.buttonRes) {
							studentElement.style.color = room.poll.responses[eachResponse].color
						}
					}
					if (studentData.help) {
						let helpDisplay = document.createElement('span')
						helpDisplay.textContent = `❗`
						studentElement.appendChild(helpDisplay)
					}
					if (studentData.break) {
						let helpDisplay = document.createElement('span')
						helpDisplay.textContent = `⏱`
						studentElement.appendChild(helpDisplay)
					}
					// if (studentData.pollRes) {
					// 	let pollDisplay = document.createElement('span')
					// 	pollDisplay.textContent = (studentData.pollRes.buttonRes || studentData.pollRes.textRes || studentData.pollRes.pollTextRes)
					// 	studentElement.appendChild(pollDisplay)
					// }
					newStudent.appendChild(studentElement);
					let permissionSwitch = document.createElement("select");
					permissionSwitch.setAttribute("name", "permSwitch");
					permissionSwitch.setAttribute("class", "permSwitch");
					permissionSwitch.setAttribute("data-userid", studentData.id);
					permissionSwitch.onchange = (event) => {
						socket.emit('classPermChange', event.target.dataset.userid, Number(event.target.value))
					}

					permissionSwitch.add(buildOption(
						TEACHER_PERMISSIONS,
						'Teacher',
						studentData.classPermissions == TEACHER_PERMISSIONS
					))
					permissionSwitch.add(buildOption(
						MOD_PERMISSIONS,
						'Mod',
						studentData.classPermissions == MOD_PERMISSIONS
					))
					permissionSwitch.add(buildOption(
						STUDENT_PERMISSIONS,
						'Student',
						studentData.classPermissions == STUDENT_PERMISSIONS
					))
					permissionSwitch.add(buildOption(
						GUEST_PERMISSIONS,
						'Guest',
						studentData.classPermissions == GUEST_PERMISSIONS
					))

					let toggleDialog = document.createElement('button')
					toggleDialog.textContent = 'Tags'
					toggleDialog.addEventListener('click', function () {
						studentTags.showModal()
					})

					let studentTags = document.createElement('dialog');
					studentTags.innerHTML = '<p>' + studentData + '</p>';
					let closeButton = document.createElement('button');
					closeButton.textContent = 'Save';
					let newTagButton = document.createElement('button');
					newTagButton.textContent = 'New Tag';
					let newTagForm = document.createElement('form');
					newTagForm.setAttribute('hidden', true);
					//newTagButton.appendChild(newTagForm);
					let newTagTextBox = document.createElement('input');
					newTagTextBox.setAttribute('type', 'text');
					newTagTextBox.setAttribute('hidden', true);
					newTagForm.appendChild(newTagTextBox);
					let newTagSaveButton = document.createElement('button');
					newTagSaveButton.textContent = 'Save Tag';
					newTagSaveButton.setAttribute('hidden', true);
					newTagForm.appendChild(newTagSaveButton);
					let tagForm = document.createElement('form');
					tagForm.setAttribute('id', studentData.username + "tags");
					for (let i = 0; i < room.tagNames.length; i++) {
						let checkbox = document.createElement('input');
						checkbox.type = 'checkbox';
						checkbox.name = `checkbox${room.tagNames[i]}`;
						checkbox.value = room.tagNames[i];
						if (studentData.tags != null && studentData.tags != undefined) {
							studentData.tags.split(",").forEach(tag => {
								if (tag == room.tagNames[i]) {
									checkbox.checked = true;
								}
							})
						};
						let label = document.createElement('label');
						label.textContent = room.tagNames[i];
						label.setAttribute('for', `checkbox${i}`);

						tagForm.appendChild(checkbox);
						tagForm.appendChild(label);
						tagForm.appendChild(document.createElement('br'));
					}
					studentTags.appendChild(tagForm)
					document.body.appendChild(studentTags)
					closeButton.addEventListener('click', function () {
						studentData.tags = ''
						var allTags = ''
						let checkboxForm = document.getElementById(studentData.username + 'tags')
						let checkboxes = checkboxForm.getElementsByTagName('input')
						for (let i = 0; i < checkboxes.length; i++) {
							let checkbox = checkboxes[i]
							// Check if the checkbox is checked
							if (checkbox.type === 'checkbox') {
								if (checkbox.checked) {
									// Add the checkbox value to the studentData.tags array
									allTags += checkbox.value + ', '
								}
							}
						}
						studentData.tags = allTags.split(', ')
						studentData.tags.pop()
						studentData.tags.sort()
						socket.emit('saveTags', studentData.id, studentData.tags, studentData.username)
						studentTags.close()
					})

					newTagButton.addEventListener('click', function () {
						newTagForm.removeAttribute('hidden');
						newTagTextBox.removeAttribute('hidden');
						newTagSaveButton.removeAttribute('hidden');
						newTagButton.setAttribute('hidden', true);
					});

					newTagSaveButton.addEventListener('click', function () {
						newTagButton.removeAttribute('hidden');
						socket.emit('newTag', newTagTextBox.value);
					})

					studentTags.appendChild(newTagButton);
					studentTags.appendChild(newTagForm);

					// Create a checkbox for the student
					let studentCheckbox = document.createElement("input");
					studentCheckbox.type = "checkbox";
					studentCheckbox.id = "checkbox_" + studentData.username;
					studentCheckbox.name = "studentCheckbox";
					studentCheckbox.addEventListener("contextmenu", function () {
						event.preventDefault();
						studentCheckbox.indeterminate = !studentCheckbox.indeterminate
					})



					newStudent.appendChild(studentCheckbox)
					studentTags.appendChild(closeButton)
					newStudent.appendChild(toggleDialog)
					newStudent.appendChild(permissionSwitch)
					newStudent.append(' ')
					let banStudentButton = document.createElement('button')
					banStudentButton.className = 'banStudent quickButton'
					banStudentButton.setAttribute('data-user', studentData.username)
					banStudentButton.textContent = 'Ban User'
					banStudentButton.onclick = (event) => {
						socket.emit('classBanUser', studentData.username)
					}
					newStudent.appendChild(banStudentButton)
					let kickUserButton = document.createElement('button')
					kickUserButton.className = 'kickUser quickButton'
					kickUserButton.setAttribute('data-userid', studentData.username)
					kickUserButton.onclick = (event) => {
						socket.emit('classKickUser', studentData.username)
					}
					kickUserButton.textContent = 'Kick User'
					newStudent.appendChild(kickUserButton)
				}

				return newStudent
			}

			// filters and sorts students
			function filterSortChange() {
				let userOrder = Object.keys(allRoom.students)

				for (let username of userOrder) {
					document.getElementById(`student-${username}`).style.display = ''
				}

				// filter by help
				for (let username of userOrder) {
					let studentElement = document.getElementById(`student-${username}`);
					if (
						(filter.help == 1 && !allRoom.students[username].help) ||
						(filter.help == 2 && allRoom.students[username].help)
					) {
						studentElement.style.display = 'none'
						userOrder.pop(username)
					}
				}

				// filter by break
				for (let username of userOrder) {
					let studentElement = document.getElementById(`student-${username}`);
					if (
						(filter.break == 1 && !allRoom.students[username].break) ||
						(filter.break == 2 && allRoom.students[username].break)
					) {
						studentElement.style.display = 'none'
						userOrder.pop(username)
					}
				}

				// filter by poll
				for (let username of userOrder) {
					let studentElement = document.getElementById(`student-${username}`);
					if (
						(filter.polls == 1 && (
							!allRoom.students[username].pollRes.buttonRes && !allRoom.students[username].pollRes.textRes)
						) ||
						(filter.polls == 2 &&
							(allRoom.students[username].pollRes.buttonRes || allRoom.students[username].pollRes.textRes)
						)
					) {
						studentElement.style.display = 'none'
						userOrder.pop(username)
					}
				}

				// sort by name
				if (sort.name == 1) {
					userOrder.students = userOrder.sort()
				} else if (sort.name == 2) {
					userOrder.students = userOrder.sort().reverse()
				}

				// sort by help time
				if (sort.helpTime == 1) {
					userOrder.sort((a, b) => {
						let studentA = allRoom.students[a]
						let studentB = allRoom.students[b]

						if (studentA.help && studentB.help) {
							const dateA = new Date()
							dateA.setHours(studentA.help.time.hours)
							dateA.setMinutes(studentA.help.time.minutes)
							dateA.setSeconds(studentA.help.time.seconds)
							const dateB = new Date()
							dateB.setHours(studentB.help.time.hours)
							dateB.setMinutes(studentB.help.time.minutes)
							dateB.setSeconds(studentB.help.time.seconds)
							if (dateA < dateB) {
								return -1
							}
						}
						else if (studentA.help) return -1
					})
				}

				// sort by poll
				if (sort.polls == 1) {
					userOrder.sort((a, b) => {
						let studentA = allRoom.students[a]
						let studentB = allRoom.students[b]

						if (studentA.pollRes.textRes && studentB.pollRes.textRes) {
							return studentA.pollRes.textRes.localeCompare(studentB.pollRes.textRes)
						} else if (studentA.pollRes.textRes) return -1
						else if (studentB.pollRes.textRes) return 1
						if (studentA.pollRes.buttonRes && studentB.pollRes.buttonRes) {
							return studentA.pollRes.buttonRes.localeCompare(studentB.pollRes.buttonRes)
						} else if (studentA.pollRes.buttonRes) return -1
						else if (studentB.pollRes.buttonRes) return 1
					})
				} else if (sort.polls == 2) {
					userOrder.sort((a, b) => {
						let studentA = allRoom.students[a]
						let studentB = allRoom.students[b]

						if (studentA.pollRes.textRes && studentB.pollRes.textRes) {
							return studentB.pollRes.textRes.localeCompare(studentA.pollRes.textRes)
						} else if (studentA.pollRes.textRes) return 1
						else if (studentB.pollRes.textRes) return -1
						if (studentA.pollRes.buttonRes && studentB.pollRes.buttonRes) {
							return studentB.pollRes.buttonRes.localeCompare(studentA.pollRes.buttonRes)
						} else if (studentA.pollRes.buttonRes) return 1
						else if (studentB.pollRes.buttonRes) return -1
					})
				}

				// //sort by permissions
				if (sort.permissions == 1) {
					userOrder.sort((a, b) => allRoom.students[b].classPermissions - allRoom.students[a].classPermissions)
				} else if (sort.permissions == 2) {
					userOrder.sort((a, b) => allRoom.students[a].classPermissions - allRoom.students[b].classPermissions)
				}

				for (let i = 0; i < userOrder.length; i++) {
					document.getElementById(`student-${userOrder[i]}`).style.order = i
				}
			}

			function makeLesson() {
				let learningObj = document.getElementById('learningObj')
				let dueAssigns = document.getElementById('dueAssigns')
				socket.emit('lessonStart', learningObj.value)
				alert('Lesson Created')
			}

			// sets filters
			for (let filterElement of document.getElementsByClassName('filter')) {
				filterElement.onclick = (event) => {
					let filterElement = event.target

					filter[filterElement.id] += 1
					if (filter[filterElement.id] > 2) {
						filter[filterElement.id] = 0
					}
					if (filter[filterElement.id] == 0) filterElement.classList.remove('pressed')
					else filterElement.classList.add('pressed')
					filterElement.textContent = FilterState[filterElement.id][filter[filterElement.id]]
					filterSortChange()
				}
			}

			// sets sorts
			for (let sortElement of document.getElementsByClassName('sort')) {
				sortElement.onclick = (event) => {
					let sortElement = event.target

					for (let sortType of Object.keys(sort)) {
						if (sortType != sortElement.id) {
							sort[sortType] = 0
							let otherSortElements = document.querySelector('.sort#' + sortType)
							if (otherSortElements) {
								otherSortElements.classList.remove('pressed')
								otherSortElements.textContent = SortState[sortType][sort[sortType]]
							}
						}
					}
					sort[sortElement.id] += 1
					if (sortElement.id == 'helpTime' && sort[sortElement.id] > 1) {
						sort[sortElement.id] = 0
					}
					else if (sort[sortElement.id] > 2) {
						sort[sortElement.id] = 0
					}
					if (sort[sortElement.id] == 0) sortElement.classList.remove('pressed')
					else sortElement.classList.add('pressed')
					sortElement.textContent = SortState[sortElement.id][sort[sortElement.id]]
					filterSortChange()
				}
			}

			function deleteTicket(e) {
				socket.emit('deleteTicket', e.dataset.studentName)
			}

			function doStep(id) {
				alert('Step ' + id + ' activated')
				socket.emit('doStep', id)
			}

			function makeLesson() {
				let learningObj = document.getElementById('learningObj')
				let dueAssigns = document.getElementById('dueAssigns')
				socket.emit('lessonStart', learningObj.value)
				alert('Lesson Created')
			}

			function approveBreak(breakApproval, username) {
				socket.emit('approveBreak', breakApproval, username)
			}








			// Starts a new poll that allows students to submit answers
			// Check how many possible responses and if the teacher wants to accept text responses
			function startPoll(customPollId) {
				var userTags = []
				var userBoxesChecked = []
				var userIndeterminate = []
				let selectTagForm = document.getElementsByName('selectTagForm')
				let allCheckboxes = document.getElementsByName('studentCheckbox')
				for (let eachTagForm of selectTagForm[0]) {
					if (eachTagForm.checked) {
						userTags.push(eachTagForm.value)
					}
				}
				userTags.sort()

				for (let eachBox of allCheckboxes) {
					if (eachBox.checked && !eachBox.indeterminate) {
						let boxId = eachBox.id.split('_')[1]
						userBoxesChecked.push(boxId)
					}
					if (eachBox.indeterminate) {
						let boxId = eachBox.id.split('_')[1]
						userIndeterminate.push(boxId)
					}
				}
				userBoxesChecked.sort()
				console.log(userTags);
				console.log(userBoxesChecked);
				console.log(userIndeterminate);
				if (customPollId) {
					let customPoll = customPolls[customPollId]

					changeTab('mainPolls', 'polls')

					var generatedColors = generateColors(customPoll.answers.length)
					socket.emit('startPoll', customPoll.answers.length, customPoll.textRes, customPoll.prompt, customPoll.answers, customPoll.blind, customPoll.weight, userTags, userBoxesChecked, userIndeterminate)
				} else {
					let blind = blindCheck.checked

					var pollAnswers = []
					for (let i = 0; i < resNumber.value; i++) {
						let pollResponse = pollResponses[i]
						let pollAnswer = {
							answer: pollResponse.answer,
							weight: pollResponse.weight,
							color: pollResponse.color
						}

						pollAnswers.push(pollAnswer)
					}
					var generatedColors = generateColors(resNumber.value)

					socket.emit('startPoll', resNumber.value, resTextBox.checked, pollPrompt.value, pollAnswers, blind, 1, userTags, userBoxesChecked, userIndeterminate)
				}
				responsesDiv.style.display = 'none'
				startPollForm.style.display = 'none'
				clearPoll.style.display = 'block'
				endPoll.style.display = 'block'
				changeTab('usersMenu', 'mainTabs')
			};

			function editCustomPoll(customPollId) {
				editingPollId = customPollId
				let customPoll = customPolls[editingPollId]

				unloadPollButton.style.display = ''
				if (customPoll.owner == currentUser.id) {
					deletePollButton.style.display = ''
					savePollButton.style.display = ''
				} else {
					deletePollButton.style.display = 'none'
					savePollButton.style.display = 'none'
				}

				blindCheck.checked = customPoll.blind
				pollPrompt.value = customPoll.prompt
				resTextBox.checked = customPoll.textRes

				responseAmountChange(customPoll.answers.length)

				let answerInputs = document.getElementsByClassName('answerName')
				for (let pollIndex = 0; pollIndex < customPoll.answers.length; pollIndex++) {
					let answer = customPoll.answers[pollIndex]

					pollResponses[pollIndex].answer = answer.answer
					answerInputs[pollIndex].value = answer.answer

					pollResponses[pollIndex].color = answer.color
					colorPickers[pollIndex].color.set(pollResponses[pollIndex].color)
					saveColor(pollIndex)

					pollResponses[pollIndex].weight = answer.weight
				}

				changeTab('mainPolls', 'polls')
				showResponses()
			}

			function unloadPoll() {
				unloadPollButton.style.display = 'none'
				savePollButton.style.display = 'none'
				deletePollButton.style.display = 'none'

				pollPrompt.value = ''
				resTextBox.checked = false
				blindCheck.checked = false

				responseAmountChange(1)
				resetAnswerNames()
				resetColors()
				editingPollId = null
			}

			function savePoll() {
				let customPoll = customPolls[editingPollId]

				customPoll.blind = blindCheck.checked
				customPoll.prompt = pollPrompt.value
				customPoll.textRes = resTextBox.checked

				var pollAnswers = []
				for (let i = 0; i < resNumber.value; i++) {
					let pollResponse = pollResponses[i]
					let pollAnswer = {
						answer: pollResponse.answer,
						weight: pollResponse.weight,
						color: pollResponse.color
					}

					pollAnswers.push(pollAnswer)
				}
				customPoll.answers = pollAnswers

				socket.emit('savePoll', customPoll, editingPollId)
			}

			function savePollAs() {
				let customPoll = {}

				customPoll.name = prompt('What do you want to call this poll')

				customPoll.blind = blindCheck.checked
				customPoll.prompt = pollPrompt.value
				customPoll.textRes = resTextBox.checked
				customPoll.public = false
				customPoll.weight = 1

				var pollAnswers = []
				for (let i = 0; i < resNumber.value; i++) {
					let pollResponse = pollResponses[i]
					let pollAnswer = {
						answer: pollResponse.answer,
						weight: pollResponse.weight,
						color: pollResponse.color
					}

					pollAnswers.push(pollAnswer)
				}
				customPoll.answers = pollAnswers

				socket.emit('savePoll', customPoll)
			}

			function openSharePoll(customPollId) {
				currentSharePollId = customPollId
				socket.emit('getPollShareIds', customPollId)

				sharePollDialog.showModal()
			}

			function sharePoll(type) {
				if (type == 'user')
					socket.emit('sharePollToUser', currentSharePollId, sharePollUserInput.value)
				else if (type == 'class')
					socket.emit('sharePollToClass', currentSharePollId, sharePollClassInput.value)
				else alert('Invalid share poll type')

				sharePollUserInput.value = ''
				sharePollClassInput.value = ''
			}

			function deletePoll(pollId) {
				if (!pollId && !editingPollId) {
					alert('No poll selected')
					return
				}
				if (!pollId) {
					pollId = editingPollId
					unloadPoll()
				}

				socket.emit('deletePoll', pollId)
			}

			function insertCustomPolls(customPollsList, customPollsDiv, emptyText) {
				customPollsDiv.innerHTML = ''
				unnamedPolls = 0

				if (customPollsList.length == 0) {
					let noPolls = document.createElement('p')
					noPolls.textContent = emptyText
					customPollsDiv.appendChild(noPolls)
				}

				for (let customPollId of customPollsList) {
					let customPoll = customPolls[customPollId]

					if (!customPoll) continue

					let customPollDiv = document.createElement('div')
					customPollDiv.className = 'customPoll'

					let customPollName = document.createElement('p')
					customPollName.className = 'custom-poll-name'
					customPollName.style.gridColumn = 1
					if (customPoll.name)
						customPollName.textContent = customPoll.name
					else if (customPoll.prompt)
						customPollName.textContent = customPoll.prompt
					else {
						unnamedPolls++
						customPollName.textContent = 'Unnamed Poll'
					}
					customPollDiv.appendChild(customPollName)

					let editButton = document.createElement('button')
					editButton.className = 'edit-custom-poll'
					editButton.style.gridColumn = 2
					editButton.textContent = 'Edit'
					editButton.onclick = () => {
						editCustomPoll(customPollId)
					}
					customPollDiv.appendChild(editButton)

					let startButton = document.createElement('button')
					startButton.className = 'start-custom-poll'
					startButton.style.gridColumn = 3
					startButton.textContent = 'Start'
					startButton.onclick = () => {
						startPoll(customPollId)
					}
					customPollDiv.appendChild(startButton)

					if (customPoll.owner == currentUser.id) {
						let shareButton = document.createElement('button')
						shareButton.className = 'share-button'
						shareButton.style.gridColumn = 4
						shareButton.textContent = 'Share'
						shareButton.onclick = () => { openSharePoll(customPollId) }
						customPollDiv.appendChild(shareButton)

						let publicButton = document.createElement('button')
						publicButton.className = 'public-button'
						publicButton.style.gridColumn = 5
						if (customPoll.public)
							publicButton.textContent = 'Make Private'
						else
							publicButton.textContent = 'Make Public'
						publicButton.onclick = () => { publicToggle(customPollId) }
						customPollDiv.appendChild(publicButton)

						let deleteButton = document.createElement('button')
						deleteButton.className = 'delete-poll'
						deleteButton.style.gridColumn = 6
						deleteButton.textContent = 'Delete'
						deleteButton.onclick = () => { deletePoll(customPollId) }
						customPollDiv.appendChild(deleteButton)
					}

					customPollsDiv.appendChild(customPollDiv)
				}
			}

			// close all color pickers if you press escape
			document.addEventListener('keydown', function (event) {
				if (event.key == 'Escape') {
					let colorPickersDiv = document.getElementsByClassName('colorPicker')
					for (let i = 0; i < colorPickersDiv.length; i++) {
						colorPickers[i].color.set(pollResponses[i].color)
						colorPickersDiv[i].style.display = 'none'
					}
				}
			})

			// close all color pickers if you click outside of them
			document.addEventListener('click', (event) => {
				if (
					!event.target.closest('.colorPicker') &&
					!event.target.classList.contains('colorPickerButton')
				) {
					let colorPickersDiv = document.getElementsByClassName('colorPicker')
					for (let i = 0; i < colorPickers.length; i++) {
						colorPickers[i].color.set(pollResponses[i].color)
						colorPickersDiv[i].style.display = 'none'
					}
				}
			})

			socket.emit('cpUpdate')
			socket.on('cpUpdate', (newRoom) => {
				classCode.textContent = 'Class Code: ' + newRoom.key
				buildPreviousPolls(newRoom.pollHistory)

				document.getElementById('nextStep').onclick = () => {
					doStep(allRoom.currentStep)
				}

				for (const username of Object.keys(newRoom.students)) {
					let studentElement = document.getElementById(`student-${username}`)
					let oldStudentData = null
					let newStudentData = newRoom.students[username]

					if (allRoom.students && allRoom.students[username])
						oldStudentData = allRoom.students[username]

					if (!studentElement) {
						usersDiv.appendChild(buildStudent(newRoom, newStudentData))
						continue
					}
					continue

					if (isObjectEqual(oldStudentData, newStudentData)) {
						continue
					}

					studentElement.replaceWith(buildStudent(newStudentData))
				}

				for (let studentElement of document.getElementsByClassName('student')) {
					if (!newRoom.students[studentElement.id.replace('student-', '')]) {
						studentElement.remove()
					}
				}

				allRoom = newRoom

				filterSortChange(newRoom)

				if (currentUser.classPermissions >= allRoom.permissions.manageStudents) {
					bannedTabButton.style.display = ''
				} else {
					bannedTabButton.style.display = 'none'

					if (bannedTabButton.classList.contains('pressed')) {
						changeTab('usersMenu', 'mainTabs')
					}
				}

				if (currentUser.classPermissions >= allRoom.permissions.controlPolls) {
					pollsTabButton.style.display = ''
				} else {
					pollsTabButton.style.display = 'none'

					if (pollsTabButton.classList.contains('pressed')) {
						changeTab('usersMenu', 'mainTabs')
					}
				}

				if (currentUser.classPermissions >= allRoom.permissions.manageClass) {
					settingsTabButton.style.display = ''
				} else {
					settingsTabButton.style.display = 'none'

					if (settingsTabButton.classList.contains('pressed')) {
						changeTab('usersMenu', 'mainTabs')
					}
				}

				if (currentUser.classPermissions >= 5) {
					permissionsTabButton.style.display = ''
				} else {
					permissionsTabButton.style.display = 'none'

					if (permissionsTabButton.classList.contains('pressed')) {
						changeTab('plugins', 'settingsTabs')
					}
				}

				if (allRoom.poll.status) {
					responsesDiv.style.display = 'none'
					startPollForm.style.display = 'none'
					endPoll.style.display = 'block'
				} else {
					responsesDiv.style.display = ''
					startPollForm.style.display = ''
					endPoll.style.display = 'none'
				}

				permissionsDiv.innerHTML = ''
				for (let [permission, level] of Object.entries(allRoom.permissions)) {
					let permissionLabel = document.createElement('label')
					permissionLabel.textContent = camelCaseToNormal(permission)
					let permissionSelect = document.createElement('select')
					permissionSelect.className = 'permissionSelect'
					permissionSelect.id = permission
					permissionSelect.onchange = (event) => {
						let select = event.target
						socket.emit('setClassPermissionSetting', select.id, select.options[select.selectedIndex].value)
					}
					let ownerOption = document.createElement('option')
					ownerOption.value = 5
					ownerOption.selected = level == 5
					ownerOption.textContent = 'Owner'
					permissionSelect.appendChild(ownerOption)
					let teacherOption = document.createElement('option')
					teacherOption.value = 4
					teacherOption.selected = level == 4
					teacherOption.textContent = 'Teacher'
					permissionSelect.appendChild(teacherOption)
					let modOption = document.createElement('option')
					modOption.value = 3
					modOption.selected = level == 3
					modOption.textContent = 'Mod'
					permissionSelect.appendChild(modOption)
					let studentOption = document.createElement('option')
					studentOption.value = 2
					studentOption.selected = level == 2
					studentOption.textContent = 'Student'
					permissionSelect.appendChild(studentOption)
					let guestOption = document.createElement('option')
					guestOption.value = 1
					guestOption.selected = level == 1
					guestOption.textContent = 'Guest'
					permissionSelect.appendChild(guestOption)
					permissionLabel.appendChild(permissionSelect)
					permissionsDiv.appendChild(permissionLabel)
				}
			})

			socket.emit('pluginUpdate')
			socket.on('pluginUpdate', (plugins) => {
				pluginsDiv.innerHTML = ''
				for (let plugin of plugins) {
					let pluginDiv = document.createElement('div')
					pluginDiv.id = plugin.id
					pluginDiv.className = 'plugin'
					let pluginName = document.createElement('input')
					pluginName.type = 'text'
					pluginName.value = plugin.name
					pluginName.placeholder = 'Name'
					pluginName.onchange = (event) => {
						socket.emit(
							'changePlugin',
							event.target.parentElement.id,
							event.target.value,
							null
						)
					}
					pluginDiv.appendChild(pluginName)
					let pluginURL = document.createElement('input')
					pluginURL.type = 'url'
					pluginURL.value = plugin.url
					pluginURL.placeholder = 'URL'
					pluginURL.onchange = (event) => {
						let pluginURL = event.target

						if (!event.target.checkValidity()) {
							event.target.reportValidity()
							return
						}

						socket.emit(
							'changePlugin',
							pluginURL.parentElement.id,
							null,
							pluginURL.value
						)
					}
					pluginDiv.appendChild(pluginURL)
					let removePlugin = document.createElement('button')
					removePlugin.className = 'quickButton'
					removePlugin.textContent = 'Remove Plugin'
					removePlugin.onclick = (event) => {
						socket.emit(
							'removePlugin',
							event.target.parentElement.id
						)
					}
					pluginDiv.appendChild(removePlugin)
					pluginsDiv.appendChild(pluginDiv)
				}

				let addPluginForm = document.createElement('div')
				addPluginForm.id = 'addPluginForm'
				let newPluginName = document.createElement('input')
				newPluginName.id = 'newPluginName'
				newPluginName.type = 'text'
				newPluginName.placeholder = 'Name'
				addPluginForm.append(newPluginName)
				let newPluginURL = document.createElement('input')
				newPluginURL.id = 'newPluginURL'
				newPluginURL.type = 'url'
				newPluginURL.placeholder = 'URL'
				addPluginForm.append(newPluginURL)
				let submitPlugin = document.createElement('button')
				submitPlugin.className = 'quickButton'
				submitPlugin.textContent = 'Add Plug-in'
				submitPlugin.onclick = () => {
					let newPluginName = document.getElementById('newPluginName')
					let newPluginURL = document.getElementById('newPluginURL')

					if (!newPluginURL.checkValidity()) {
						newPluginURL.reportValidity()
						return
					}

					socket.emit('addPlugin', newPluginName.value, newPluginURL.value)
				}
				addPluginForm.append(submitPlugin)
				pluginsDiv.append(addPluginForm)
			})


			socket.emit('customPollUpdate')
			socket.on('customPollUpdate', (
				newPublicCustomPolls,
				newClassroomCustomPolls,
				newUserCustomPolls,
				newCustomPolls
			) => {
				publicCustomPolls = newPublicCustomPolls
				classroomCustomPolls = newClassroomCustomPolls
				userCustomPolls = newUserCustomPolls
				customPolls = newCustomPolls
				let publicPollsDiv = document.querySelector('div#publicPolls')
				let classPollsDiv = document.querySelector('div#classPolls')
				let userPollsDiv = document.querySelector('div#userPolls')

				insertCustomPolls(publicCustomPolls, publicPollsDiv, 'There are no public custom polls.')
				insertCustomPolls(classroomCustomPolls, classPollsDiv, 'This class has no custom polls.')
				insertCustomPolls(userCustomPolls, userPollsDiv, 'You have no custom polls.')
			})

			socket.on('getPollShareIds', (userPollShares, classPollShares) => {
				let userPollSharesDiv = document.getElementById('userPollShares')
				userPollSharesDiv.innerHTML = ''
				let classPollSharesDiv = document.getElementById('classPollShares')
				classPollSharesDiv.innerHTML = ''

				function addPollShare(socketName, pollName, id, pollsShareDiv) {
					let pollShareDiv = document.createElement('div')
					pollShareDiv.className = 'pollShare'
					pollShareDiv.style.display = 'flex'

					let name = document.createElement('p')
					name.textContent = pollName
					pollShareDiv.appendChild(name)

					let remove = document.createElement('button')
					remove.textContent = 'remove'
					remove.className = 'quickButton'
					remove.onclick = () => {
						socketName, currentSharePollId, id
						socket.emit(socketName, currentSharePollId, id)
					}
					pollShareDiv.appendChild(remove)

					pollsShareDiv.appendChild(pollShareDiv)
				}

				for (let pollShare of userPollShares) {
					addPollShare('removeUserPollShare', pollShare.username, pollShare.userId, userPollSharesDiv)
				}

				for (let pollShare of classPollShares) {
					addPollShare('removeClassPollShare', pollShare.name, pollShare.classId, classPollSharesDiv)
				}
			})

			var selectTags = document.createElement('dialog')
			let closeTags = document.createElement('button');
			let selectTagForm = document.createElement('form');
			selectTagForm.setAttribute('name', 'selectTagForm');

			var tagNames = "<%=tagNames%>";
			tagNames = tagNames.split(",");
			console.log(tagNames);
			for (let i = 0; i < tagNames.length; i++) {
				let checkbox = document.createElement('input');
				checkbox.type = 'checkbox';
				checkbox.name = `tagSelector`;
				checkbox.id = `tagSelector${tagNames[i]}`
				checkbox.value = tagNames[i];
				let label = document.createElement('label');
				label.textContent = tagNames[i];
				label.setAttribute('for', `checkbox${i}`);

				selectTagForm.appendChild(checkbox);
				selectTagForm.appendChild(label);
				selectTagForm.appendChild(document.createElement('br'));
			}
			let tagsAllSame = document.createElement('input');
			tagsAllSame.type = 'checkbox';
			tagsAllSame.value = 0 + ':Exact Same Tags'
			tagsAllSame.name = 'tagSelector';
			let tagsHas = document.createElement('input');
			tagsHas.type = 'checkbox';
			tagsHas.value = 1 + ':Has The Tags'
			tagsHas.name = `tagSelector`;
			let tagsAllSameLabel = document.createElement('label');
			let tagsHasLabel = document.createElement('label');
			tagsAllSameLabel.textContent = `Exact Same Tags`;
			tagsHasLabel.textContent = 'Has The Tags';
			tagSelectorParagraph = document.createElement('p');
			tagSelectorParagraph.textContent = 'Pick One Below:';
			selectTagForm.appendChild(tagSelectorParagraph)
			selectTagForm.appendChild(tagsAllSame);
			selectTagForm.appendChild(tagsAllSameLabel);
			selectTagForm.appendChild(document.createElement('br'));
			selectTagForm.appendChild(tagsHas);
			selectTagForm.appendChild(tagsHasLabel);
			selectTagForm.appendChild(document.createElement('br'));
			selectTags.appendChild(selectTagForm);
			selectTags.appendChild(document.createElement('br'));
			selectTags.appendChild(closeTags);
			document.body.appendChild(selectTags);
			closeTags.textContent = 'Save';
			closeTags.addEventListener('click', function () {
				selectTags.close();
			})

			socket.emit('classBannedUsersUpdate')
			socket.on('classBannedUsersUpdate', (bannedStudents) => {
				let bannedDiv = document.querySelector('#bannedMenu.tabContent')
				bannedDiv.innerHTML = ''

				for (let bannedStudent of bannedStudents) {
					let bannedStudentDiv = document.createElement('div')
					bannedStudentDiv.className = 'bannedStudent'
					bannedStudentName = document.createElement('p')
					bannedStudentName.textContent = bannedStudent
					bannedStudentDiv.appendChild(bannedStudentName)
					unban = document.createElement('button')
					unban.textContent = 'unban'
					unban.className = 'quickButton'
					unban.onclick = () => {
						socket.emit('classUnbanUser', bannedStudent)
					}
					bannedStudentDiv.appendChild(unban)
					document.querySelector('#bannedMenu.tabContent').appendChild(bannedStudentDiv)
				}
			})

			socket.on('startPoll', () => {
				responsesDiv.style.display = 'none'
				startPollForm.style.display = 'none'
				endPoll.style.display = 'block'
				changeTab('usersMenu', 'mainTabs')
			})

			socket.on('endPoll', () => {
				startPollForm.style.display = 'block'
				endPoll.style.display = 'none'
			})
		</script>

		<%- include('../partials/footer_content') %>

			</html>